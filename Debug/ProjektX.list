
ProjektX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001368  08001368  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001368  08001368  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001368  08001368  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001368  08001368  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001368  08001368  00011368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800136c  0800136c  0001136c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  0800137c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800137c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d50  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001639  00000000  00000000  00027d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  000293c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  00029d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb10  00000000  00000000  0002a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cf6  00000000  00000000  0003a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006109f  00000000  00000000  00043e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a4f3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d0  00000000  00000000  000a4f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001350 	.word	0x08001350

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001350 	.word	0x08001350

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LedHandler_Init>:
static void LedHandler_TurnOnLED();

static void LedHandler_TurnOffLED();

void LedHandler_Init()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	timeMS = 0;
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <LedHandler_Init+0x18>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
	prevTimeMS = 0;
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <LedHandler_Init+0x1c>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	20000028 	.word	0x20000028
 800023c:	2000002c 	.word	0x2000002c

08000240 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <LL_RCC_HSI_Enable+0x18>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <LL_RCC_HSI_Enable+0x18>)
 800024a:	2101      	movs	r1, #1
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <LL_RCC_HSI_IsReady+0x1c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2202      	movs	r2, #2
 8000266:	4013      	ands	r3, r2
 8000268:	3b02      	subs	r3, #2
 800026a:	425a      	negs	r2, r3
 800026c:	4153      	adcs	r3, r2
 800026e:	b2db      	uxtb	r3, r3
}
 8000270:	0018      	movs	r0, r3
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	40021000 	.word	0x40021000

0800027c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	22f8      	movs	r2, #248	; 0xf8
 800028a:	4393      	bics	r3, r2
 800028c:	0019      	movs	r1, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	00da      	lsls	r2, r3, #3
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000294:	430a      	orrs	r2, r1
 8000296:	601a      	str	r2, [r3, #0]
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40021000 	.word	0x40021000

080002a4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <LL_RCC_SetSysClkSource+0x24>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	2203      	movs	r2, #3
 80002b2:	4393      	bics	r3, r2
 80002b4:	0019      	movs	r1, r3
 80002b6:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <LL_RCC_SetSysClkSource+0x24>)
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	430a      	orrs	r2, r1
 80002bc:	605a      	str	r2, [r3, #4]
}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	46bd      	mov	sp, r7
 80002c2:	b002      	add	sp, #8
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <LL_RCC_GetSysClkSource+0x14>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	220c      	movs	r2, #12
 80002d6:	4013      	ands	r3, r2
}
 80002d8:	0018      	movs	r0, r3
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	40021000 	.word	0x40021000

080002e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <LL_RCC_SetAHBPrescaler+0x24>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	22f0      	movs	r2, #240	; 0xf0
 80002f2:	4393      	bics	r3, r2
 80002f4:	0019      	movs	r1, r3
 80002f6:	4b04      	ldr	r3, [pc, #16]	; (8000308 <LL_RCC_SetAHBPrescaler+0x24>)
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	430a      	orrs	r2, r1
 80002fc:	605a      	str	r2, [r3, #4]
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b002      	add	sp, #8
 8000304:	bd80      	pop	{r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	40021000 	.word	0x40021000

0800030c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <LL_RCC_SetAPB1Prescaler+0x28>)
 800031a:	4013      	ands	r3, r2
 800031c:	0019      	movs	r1, r3
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	430a      	orrs	r2, r1
 8000324:	605a      	str	r2, [r3, #4]
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b002      	add	sp, #8
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	40021000 	.word	0x40021000
 8000334:	fffff8ff 	.word	0xfffff8ff

08000338 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000342:	6959      	ldr	r1, [r3, #20]
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	430a      	orrs	r2, r1
 800034a:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <LL_AHB1_GRP1_EnableClock+0x28>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	4013      	ands	r3, r2
 8000354:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000356:	68fb      	ldr	r3, [r7, #12]
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b004      	add	sp, #16
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40021000 	.word	0x40021000

08000364 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <LL_FLASH_SetLatency+0x24>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2201      	movs	r2, #1
 8000372:	4393      	bics	r3, r2
 8000374:	0019      	movs	r1, r3
 8000376:	4b04      	ldr	r3, [pc, #16]	; (8000388 <LL_FLASH_SetLatency+0x24>)
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	430a      	orrs	r2, r1
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b002      	add	sp, #8
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	40022000 	.word	0x40022000

0800038c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <LL_FLASH_GetLatency+0x14>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2201      	movs	r2, #1
 8000396:	4013      	ands	r3, r2
}
 8000398:	0018      	movs	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	40022000 	.word	0x40022000

080003a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	683a      	ldr	r2, [r7, #0]
 80003b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bd80      	pop	{r7, pc}

080003bc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	4013      	ands	r3, r2
 80003d2:	041a      	lsls	r2, r3, #16
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	43db      	mvns	r3, r3
 80003d8:	6839      	ldr	r1, [r7, #0]
 80003da:	400b      	ands	r3, r1
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	619a      	str	r2, [r3, #24]
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b004      	add	sp, #16
 80003e8:	bd80      	pop	{r7, pc}

080003ea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ee:	f000 f973 	bl	80006d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  LedHandler_Init();
 80003f2:	f7ff ff15 	bl	8000220 <LedHandler_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f80b 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 f899 	bl	8000530 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003fe:	f000 f83b 	bl	8000478 <MX_TIM1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//LedHandler_MainFunction();
	  LL_GPIO_TogglePin(GPIOA, 1);
 8000402:	2390      	movs	r3, #144	; 0x90
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	2101      	movs	r1, #1
 8000408:	0018      	movs	r0, r3
 800040a:	f7ff ffd7 	bl	80003bc <LL_GPIO_TogglePin>
 800040e:	e7f8      	b.n	8000402 <main+0x18>

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000414:	2000      	movs	r0, #0
 8000416:	f7ff ffa5 	bl	8000364 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	f7ff ffb6 	bl	800038c <LL_FLASH_GetLatency>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d1fb      	bne.n	800041c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000424:	f7ff ff0c 	bl	8000240 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	f7ff ff17 	bl	800025c <LL_RCC_HSI_IsReady>
 800042e:	0003      	movs	r3, r0
 8000430:	2b01      	cmp	r3, #1
 8000432:	d1fa      	bne.n	800042a <SystemClock_Config+0x1a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000434:	2010      	movs	r0, #16
 8000436:	f7ff ff21 	bl	800027c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_8);
 800043a:	20a0      	movs	r0, #160	; 0xa0
 800043c:	f7ff ff52 	bl	80002e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000440:	2000      	movs	r0, #0
 8000442:	f7ff ff63 	bl	800030c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000446:	2000      	movs	r0, #0
 8000448:	f7ff ff2c 	bl	80002a4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	f7ff ff3d 	bl	80002cc <LL_RCC_GetSysClkSource>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d1fb      	bne.n	800044e <SystemClock_Config+0x3e>
  {

  }
  LL_SetSystemCoreClock(1000000);
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <SystemClock_Config+0x64>)
 8000458:	0018      	movs	r0, r3
 800045a:	f000 ff3f 	bl	80012dc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800045e:	2003      	movs	r0, #3
 8000460:	f000 f94e 	bl	8000700 <HAL_InitTick>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000468:	f000 f891 	bl	800058e <Error_Handler>
  }
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	000f4240 	.word	0x000f4240

08000478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800047e:	230c      	movs	r3, #12
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	0018      	movs	r0, r3
 8000484:	2314      	movs	r3, #20
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f000 ff59 	bl	8001340 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	0018      	movs	r0, r3
 8000492:	2308      	movs	r3, #8
 8000494:	001a      	movs	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	f000 ff52 	bl	8001340 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <MX_TIM1_Init+0xac>)
 800049e:	4a22      	ldr	r2, [pc, #136]	; (8000528 <MX_TIM1_Init+0xb0>)
 80004a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <MX_TIM1_Init+0xac>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_TIM1_Init+0xac>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <MX_TIM1_Init+0xac>)
 80004b0:	4a1e      	ldr	r2, [pc, #120]	; (800052c <MX_TIM1_Init+0xb4>)
 80004b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_TIM1_Init+0xac>)
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <MX_TIM1_Init+0xac>)
 80004be:	2200      	movs	r2, #0
 80004c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_TIM1_Init+0xac>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_TIM1_Init+0xac>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fa3c 	bl	8000948 <HAL_TIM_Base_Init>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 80004d4:	f000 f85b 	bl	800058e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80004d8:	210c      	movs	r1, #12
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80004e6:	187a      	adds	r2, r7, r1
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_TIM1_Init+0xac>)
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fb91 	bl	8000c14 <HAL_TIM_SlaveConfigSynchro>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80004f6:	f000 f84a 	bl	800058e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000506:	1d3a      	adds	r2, r7, #4
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_TIM1_Init+0xac>)
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fd6d 	bl	8000fec <HAL_TIMEx_MasterConfigSynchronization>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000516:	f000 f83a 	bl	800058e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b008      	add	sp, #32
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000030 	.word	0x20000030
 8000528:	40012c00 	.word	0x40012c00
 800052c:	0000ffff 	.word	0x0000ffff

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	003b      	movs	r3, r7
 8000538:	0018      	movs	r0, r3
 800053a:	2318      	movs	r3, #24
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f000 fefe 	bl	8001340 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	0018      	movs	r0, r3
 800054a:	f7ff fef5 	bl	8000338 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800054e:	2390      	movs	r3, #144	; 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2110      	movs	r1, #16
 8000554:	0018      	movs	r0, r3
 8000556:	f7ff ff25 	bl	80003a4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800055a:	003b      	movs	r3, r7
 800055c:	2210      	movs	r2, #16
 800055e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000560:	003b      	movs	r3, r7
 8000562:	2201      	movs	r2, #1
 8000564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000566:	003b      	movs	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800056c:	003b      	movs	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	003a      	movs	r2, r7
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fe4e 	bl	8001222 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b006      	add	sp, #24
 800058c:	bd80      	pop	{r7, pc}

0800058e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000592:	b672      	cpsid	i
}
 8000594:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000596:	e7fe      	b.n	8000596 <Error_Handler+0x8>

08000598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x44>)
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_MspInit+0x44>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	619a      	str	r2, [r3, #24]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_MspInit+0x44>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_MspInit+0x44>)
 80005b8:	69da      	ldr	r2, [r3, #28]
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_MspInit+0x44>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	0549      	lsls	r1, r1, #21
 80005c0:	430a      	orrs	r2, r1
 80005c2:	61da      	str	r2, [r3, #28]
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_MspInit+0x44>)
 80005c6:	69da      	ldr	r2, [r3, #28]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	055b      	lsls	r3, r3, #21
 80005cc:	4013      	ands	r3, r2
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_TIM_Base_MspInit+0x48>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d115      	bne.n	800061e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_TIM_Base_MspInit+0x4c>)
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <HAL_TIM_Base_MspInit+0x4c>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0109      	lsls	r1, r1, #4
 80005fc:	430a      	orrs	r2, r1
 80005fe:	619a      	str	r2, [r3, #24]
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_TIM_Base_MspInit+0x4c>)
 8000602:	699a      	ldr	r2, [r3, #24]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4013      	ands	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	200e      	movs	r0, #14
 8000614:	f000 f966 	bl	80008e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000618:	200e      	movs	r0, #14
 800061a:	f000 f978 	bl	800090e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40012c00 	.word	0x40012c00
 800062c:	40021000 	.word	0x40021000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000654:	f000 f888 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <TIM1_CC_IRQHandler+0x14>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 f9be 	bl	80009e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000030 	.word	0x20000030

08000678 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000686:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000688:	f7ff fff6 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	; (80006d0 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b2:	f000 fe21 	bl	80012f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fe98 	bl	80003ea <main>

080006ba <LoopForever>:

LoopForever:
    b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   r0, =_estack
 80006bc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c8:	08001370 	.word	0x08001370
  ldr r2, =_sbss
 80006cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d0:	2000007c 	.word	0x2000007c

080006d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_IRQHandler>
	...

080006d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_Init+0x24>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_Init+0x24>)
 80006e2:	2110      	movs	r1, #16
 80006e4:	430a      	orrs	r2, r1
 80006e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f809 	bl	8000700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ee:	f7ff ff53 	bl	8000598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_InitTick+0x5c>)
 800070a:	681c      	ldr	r4, [r3, #0]
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_InitTick+0x60>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	0019      	movs	r1, r3
 8000712:	23fa      	movs	r3, #250	; 0xfa
 8000714:	0098      	lsls	r0, r3, #2
 8000716:	f7ff fcf7 	bl	8000108 <__udivsi3>
 800071a:	0003      	movs	r3, r0
 800071c:	0019      	movs	r1, r3
 800071e:	0020      	movs	r0, r4
 8000720:	f7ff fcf2 	bl	8000108 <__udivsi3>
 8000724:	0003      	movs	r3, r0
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f901 	bl	800092e <HAL_SYSTICK_Config>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000730:	2301      	movs	r3, #1
 8000732:	e00f      	b.n	8000754 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d80b      	bhi.n	8000752 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2301      	movs	r3, #1
 800073e:	425b      	negs	r3, r3
 8000740:	2200      	movs	r2, #0
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f8ce 	bl	80008e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_InitTick+0x64>)
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b003      	add	sp, #12
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	001a      	movs	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	18d2      	adds	r2, r2, r3
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_IncTick+0x20>)
 800077a:	601a      	str	r2, [r3, #0]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000008 	.word	0x20000008
 8000788:	20000078 	.word	0x20000078

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	0002      	movs	r2, r0
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b7f      	cmp	r3, #127	; 0x7f
 800079e:	d809      	bhi.n	80007b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	001a      	movs	r2, r3
 80007a6:	231f      	movs	r3, #31
 80007a8:	401a      	ands	r2, r3
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <__NVIC_EnableIRQ+0x30>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	4091      	lsls	r1, r2
 80007b0:	000a      	movs	r2, r1
 80007b2:	601a      	str	r2, [r3, #0]
  }
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b7f      	cmp	r3, #127	; 0x7f
 80007d4:	d828      	bhi.n	8000828 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <__NVIC_SetPriority+0xd4>)
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	33c0      	adds	r3, #192	; 0xc0
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	589b      	ldr	r3, [r3, r2]
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	0011      	movs	r1, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	400a      	ands	r2, r1
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	21ff      	movs	r1, #255	; 0xff
 80007f4:	4091      	lsls	r1, r2
 80007f6:	000a      	movs	r2, r1
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	401a      	ands	r2, r3
 80007fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	019b      	lsls	r3, r3, #6
 8000802:	22ff      	movs	r2, #255	; 0xff
 8000804:	401a      	ands	r2, r3
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0018      	movs	r0, r3
 800080c:	2303      	movs	r3, #3
 800080e:	4003      	ands	r3, r0
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	481f      	ldr	r0, [pc, #124]	; (8000894 <__NVIC_SetPriority+0xd4>)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b25b      	sxtb	r3, r3
 800081c:	089b      	lsrs	r3, r3, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	33c0      	adds	r3, #192	; 0xc0
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000826:	e031      	b.n	800088c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <__NVIC_SetPriority+0xd8>)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0019      	movs	r1, r3
 8000830:	230f      	movs	r3, #15
 8000832:	400b      	ands	r3, r1
 8000834:	3b08      	subs	r3, #8
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	3306      	adds	r3, #6
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	18d3      	adds	r3, r2, r3
 800083e:	3304      	adds	r3, #4
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1dfa      	adds	r2, r7, #7
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	0011      	movs	r1, r2
 8000848:	2203      	movs	r2, #3
 800084a:	400a      	ands	r2, r1
 800084c:	00d2      	lsls	r2, r2, #3
 800084e:	21ff      	movs	r1, #255	; 0xff
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	43d2      	mvns	r2, r2
 8000856:	401a      	ands	r2, r3
 8000858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	019b      	lsls	r3, r3, #6
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	401a      	ands	r2, r3
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0018      	movs	r0, r3
 8000868:	2303      	movs	r3, #3
 800086a:	4003      	ands	r3, r0
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <__NVIC_SetPriority+0xd8>)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	001c      	movs	r4, r3
 8000878:	230f      	movs	r3, #15
 800087a:	4023      	ands	r3, r4
 800087c:	3b08      	subs	r3, #8
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	430a      	orrs	r2, r1
 8000882:	3306      	adds	r3, #6
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	18c3      	adds	r3, r0, r3
 8000888:	3304      	adds	r3, #4
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b003      	add	sp, #12
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	045b      	lsls	r3, r3, #17
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d301      	bcc.n	80008b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b0:	2301      	movs	r3, #1
 80008b2:	e010      	b.n	80008d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <SysTick_Config+0x44>)
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	3a01      	subs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008bc:	2301      	movs	r3, #1
 80008be:	425b      	negs	r3, r3
 80008c0:	2103      	movs	r1, #3
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff ff7c 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <SysTick_Config+0x44>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Config+0x44>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	210f      	movs	r1, #15
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	1c02      	adds	r2, r0, #0
 80008f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff ff5d 	bl	80007c0 <__NVIC_SetPriority>
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	0002      	movs	r2, r0
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b25b      	sxtb	r3, r3
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ff33 	bl	800078c <__NVIC_EnableIRQ>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ffaf 	bl	800089c <SysTick_Config>
 800093e:	0003      	movs	r3, r0
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e042      	b.n	80009e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	223d      	movs	r2, #61	; 0x3d
 800095e:	5c9b      	ldrb	r3, [r3, r2]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d107      	bne.n	8000976 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	223c      	movs	r2, #60	; 0x3c
 800096a:	2100      	movs	r1, #0
 800096c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fe35 	bl	80005e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	223d      	movs	r2, #61	; 0x3d
 800097a:	2102      	movs	r1, #2
 800097c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3304      	adds	r3, #4
 8000986:	0019      	movs	r1, r3
 8000988:	0010      	movs	r0, r2
 800098a:	f000 f9b1 	bl	8000cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2246      	movs	r2, #70	; 0x46
 8000992:	2101      	movs	r1, #1
 8000994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	223e      	movs	r2, #62	; 0x3e
 800099a:	2101      	movs	r1, #1
 800099c:	5499      	strb	r1, [r3, r2]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	223f      	movs	r2, #63	; 0x3f
 80009a2:	2101      	movs	r1, #1
 80009a4:	5499      	strb	r1, [r3, r2]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	2101      	movs	r1, #1
 80009ac:	5499      	strb	r1, [r3, r2]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2241      	movs	r2, #65	; 0x41
 80009b2:	2101      	movs	r1, #1
 80009b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2242      	movs	r2, #66	; 0x42
 80009ba:	2101      	movs	r1, #1
 80009bc:	5499      	strb	r1, [r3, r2]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2243      	movs	r2, #67	; 0x43
 80009c2:	2101      	movs	r1, #1
 80009c4:	5499      	strb	r1, [r3, r2]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2244      	movs	r2, #68	; 0x44
 80009ca:	2101      	movs	r1, #1
 80009cc:	5499      	strb	r1, [r3, r2]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2245      	movs	r2, #69	; 0x45
 80009d2:	2101      	movs	r1, #1
 80009d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	223d      	movs	r2, #61	; 0x3d
 80009da:	2101      	movs	r1, #1
 80009dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	2202      	movs	r2, #2
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d124      	bne.n	8000a48 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d11d      	bne.n	8000a48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2203      	movs	r2, #3
 8000a12:	4252      	negs	r2, r2
 8000a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	2203      	movs	r2, #3
 8000a24:	4013      	ands	r3, r2
 8000a26:	d004      	beq.n	8000a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f948 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
 8000a30:	e007      	b.n	8000a42 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f93b 	bl	8000cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 f947 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d125      	bne.n	8000aa2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d11e      	bne.n	8000aa2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2205      	movs	r2, #5
 8000a6a:	4252      	negs	r2, r2
 8000a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2202      	movs	r2, #2
 8000a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	699a      	ldr	r2, [r3, #24]
 8000a7a:	23c0      	movs	r3, #192	; 0xc0
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d004      	beq.n	8000a8c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 f91b 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
 8000a8a:	e007      	b.n	8000a9c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f90e 	bl	8000cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 f91a 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	4013      	ands	r3, r2
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d124      	bne.n	8000afa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b08      	cmp	r3, #8
 8000abc:	d11d      	bne.n	8000afa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2209      	movs	r2, #9
 8000ac4:	4252      	negs	r2, r2
 8000ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2204      	movs	r2, #4
 8000acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d004      	beq.n	8000ae4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 f8ef 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
 8000ae2:	e007      	b.n	8000af4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f8e2 	bl	8000cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f8ee 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	2210      	movs	r2, #16
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d125      	bne.n	8000b54 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	2210      	movs	r2, #16
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b10      	cmp	r3, #16
 8000b14:	d11e      	bne.n	8000b54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2211      	movs	r2, #17
 8000b1c:	4252      	negs	r2, r2
 8000b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2208      	movs	r2, #8
 8000b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	69da      	ldr	r2, [r3, #28]
 8000b2c:	23c0      	movs	r3, #192	; 0xc0
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4013      	ands	r3, r2
 8000b32:	d004      	beq.n	8000b3e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 f8c2 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
 8000b3c:	e007      	b.n	8000b4e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	0018      	movs	r0, r3
 8000b42:	f000 f8b5 	bl	8000cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 f8c1 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d10f      	bne.n	8000b82 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d108      	bne.n	8000b82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2202      	movs	r2, #2
 8000b76:	4252      	negs	r2, r2
 8000b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 f88f 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b80      	cmp	r3, #128	; 0x80
 8000b8e:	d10f      	bne.n	8000bb0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b80      	cmp	r3, #128	; 0x80
 8000b9c:	d108      	bne.n	8000bb0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2281      	movs	r2, #129	; 0x81
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fa78 	bl	80010a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	2240      	movs	r2, #64	; 0x40
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b40      	cmp	r3, #64	; 0x40
 8000bbc:	d10f      	bne.n	8000bde <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b40      	cmp	r3, #64	; 0x40
 8000bca:	d108      	bne.n	8000bde <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2241      	movs	r2, #65	; 0x41
 8000bd2:	4252      	negs	r2, r2
 8000bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 f881 	bl	8000ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	2220      	movs	r2, #32
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b20      	cmp	r3, #32
 8000bea:	d10f      	bne.n	8000c0c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	2b20      	cmp	r3, #32
 8000bf8:	d108      	bne.n	8000c0c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2221      	movs	r2, #33	; 0x21
 8000c00:	4252      	negs	r2, r2
 8000c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fa42 	bl	8001090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	223c      	movs	r2, #60	; 0x3c
 8000c22:	5c9b      	ldrb	r3, [r3, r2]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d101      	bne.n	8000c2c <HAL_TIM_SlaveConfigSynchro+0x18>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	e032      	b.n	8000c92 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	223c      	movs	r2, #60	; 0x3c
 8000c30:	2101      	movs	r1, #1
 8000c32:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	223d      	movs	r2, #61	; 0x3d
 8000c38:	2102      	movs	r1, #2
 8000c3a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	0011      	movs	r1, r2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 f8c0 	bl	8000dc8 <TIM_SlaveTimer_SetConfig>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d009      	beq.n	8000c60 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	223d      	movs	r2, #61	; 0x3d
 8000c50:	2101      	movs	r1, #1
 8000c52:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	223c      	movs	r2, #60	; 0x3c
 8000c58:	2100      	movs	r1, #0
 8000c5a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e018      	b.n	8000c92 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	438a      	bics	r2, r1
 8000c6e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <HAL_TIM_SlaveConfigSynchro+0x88>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	223d      	movs	r2, #61	; 0x3d
 8000c84:	2101      	movs	r1, #1
 8000c86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	223c      	movs	r2, #60	; 0x3c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	ffffbfff 	.word	0xffffbfff

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <TIM_Base_SetConfig+0xc0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d003      	beq.n	8000d10 <TIM_Base_SetConfig+0x20>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <TIM_Base_SetConfig+0xc4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d108      	bne.n	8000d22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2270      	movs	r2, #112	; 0x70
 8000d14:	4393      	bics	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <TIM_Base_SetConfig+0xc0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00f      	beq.n	8000d4a <TIM_Base_SetConfig+0x5a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <TIM_Base_SetConfig+0xc4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00b      	beq.n	8000d4a <TIM_Base_SetConfig+0x5a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <TIM_Base_SetConfig+0xc8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d007      	beq.n	8000d4a <TIM_Base_SetConfig+0x5a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <TIM_Base_SetConfig+0xcc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d003      	beq.n	8000d4a <TIM_Base_SetConfig+0x5a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <TIM_Base_SetConfig+0xd0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d108      	bne.n	8000d5c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <TIM_Base_SetConfig+0xd4>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	4393      	bics	r3, r2
 8000d62:	001a      	movs	r2, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <TIM_Base_SetConfig+0xc0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <TIM_Base_SetConfig+0xaa>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <TIM_Base_SetConfig+0xcc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d003      	beq.n	8000d9a <TIM_Base_SetConfig+0xaa>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <TIM_Base_SetConfig+0xd0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d103      	bne.n	8000da2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	615a      	str	r2, [r3, #20]
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b004      	add	sp, #16
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	40000400 	.word	0x40000400
 8000db8:	40002000 	.word	0x40002000
 8000dbc:	40014400 	.word	0x40014400
 8000dc0:	40014800 	.word	0x40014800
 8000dc4:	fffffcff 	.word	0xfffffcff

08000dc8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd2:	2317      	movs	r3, #23
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	2270      	movs	r2, #112	; 0x70
 8000de6:	4393      	bics	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	2207      	movs	r2, #7
 8000df8:	4393      	bics	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b70      	cmp	r3, #112	; 0x70
 8000e14:	d015      	beq.n	8000e42 <TIM_SlaveTimer_SetConfig+0x7a>
 8000e16:	d900      	bls.n	8000e1a <TIM_SlaveTimer_SetConfig+0x52>
 8000e18:	e05b      	b.n	8000ed2 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e1a:	2b60      	cmp	r3, #96	; 0x60
 8000e1c:	d04f      	beq.n	8000ebe <TIM_SlaveTimer_SetConfig+0xf6>
 8000e1e:	d858      	bhi.n	8000ed2 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e20:	2b50      	cmp	r3, #80	; 0x50
 8000e22:	d042      	beq.n	8000eaa <TIM_SlaveTimer_SetConfig+0xe2>
 8000e24:	d855      	bhi.n	8000ed2 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e26:	2b40      	cmp	r3, #64	; 0x40
 8000e28:	d016      	beq.n	8000e58 <TIM_SlaveTimer_SetConfig+0x90>
 8000e2a:	d852      	bhi.n	8000ed2 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e2c:	2b30      	cmp	r3, #48	; 0x30
 8000e2e:	d055      	beq.n	8000edc <TIM_SlaveTimer_SetConfig+0x114>
 8000e30:	d84f      	bhi.n	8000ed2 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d052      	beq.n	8000edc <TIM_SlaveTimer_SetConfig+0x114>
 8000e36:	d84c      	bhi.n	8000ed2 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d04f      	beq.n	8000edc <TIM_SlaveTimer_SetConfig+0x114>
 8000e3c:	2b10      	cmp	r3, #16
 8000e3e:	d04d      	beq.n	8000edc <TIM_SlaveTimer_SetConfig+0x114>
 8000e40:	e047      	b.n	8000ed2 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68d9      	ldr	r1, [r3, #12]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	f000 f8ab 	bl	8000fac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8000e56:	e042      	b.n	8000ede <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d101      	bne.n	8000e64 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e03f      	b.n	8000ee4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a1a      	ldr	r2, [r3, #32]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2101      	movs	r1, #1
 8000e78:	438a      	bics	r2, r1
 8000e7a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	22f0      	movs	r2, #240	; 0xf0
 8000e88:	4393      	bics	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	621a      	str	r2, [r3, #32]
      break;
 8000ea8:	e019      	b.n	8000ede <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	6899      	ldr	r1, [r3, #8]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	f000 f818 	bl	8000eec <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8000ebc:	e00f      	b.n	8000ede <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	6899      	ldr	r1, [r3, #8]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	001a      	movs	r2, r3
 8000ecc:	f000 f83c 	bl	8000f48 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8000ed0:	e005      	b.n	8000ede <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8000ed2:	2317      	movs	r3, #23
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
      break;
 8000eda:	e000      	b.n	8000ede <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8000edc:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8000ede:	2317      	movs	r3, #23
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	781b      	ldrb	r3, [r3, #0]
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b006      	add	sp, #24
 8000eea:	bd80      	pop	{r7, pc}

08000eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4393      	bics	r3, r2
 8000f06:	001a      	movs	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	22f0      	movs	r2, #240	; 0xf0
 8000f16:	4393      	bics	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	220a      	movs	r2, #10
 8000f28:	4393      	bics	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	621a      	str	r2, [r3, #32]
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b006      	add	sp, #24
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	2210      	movs	r2, #16
 8000f5a:	4393      	bics	r3, r2
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <TIM_TI2_ConfigInputStage+0x60>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	031b      	lsls	r3, r3, #12
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	22a0      	movs	r2, #160	; 0xa0
 8000f84:	4393      	bics	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	621a      	str	r2, [r3, #32]
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b006      	add	sp, #24
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	ffff0fff 	.word	0xffff0fff

08000fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <TIM_ETR_SetConfig+0x3c>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	021a      	lsls	r2, r3, #8
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	609a      	str	r2, [r3, #8]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	ffff00ff 	.word	0xffff00ff

08000fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	223c      	movs	r2, #60	; 0x3c
 8000ffa:	5c9b      	ldrb	r3, [r3, r2]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001000:	2302      	movs	r3, #2
 8001002:	e03c      	b.n	800107e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	223c      	movs	r2, #60	; 0x3c
 8001008:	2101      	movs	r1, #1
 800100a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	223d      	movs	r2, #61	; 0x3d
 8001010:	2102      	movs	r1, #2
 8001012:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2270      	movs	r2, #112	; 0x70
 8001028:	4393      	bics	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d004      	beq.n	8001052 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10c      	bne.n	800106c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	4393      	bics	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4313      	orrs	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	223d      	movs	r2, #61	; 0x3d
 8001070:	2101      	movs	r1, #1
 8001072:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	223c      	movs	r2, #60	; 0x3c
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	0018      	movs	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	b004      	add	sp, #16
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	40012c00 	.word	0x40012c00
 800108c:	40000400 	.word	0x40000400

08001090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <LL_GPIO_SetPinMode>:
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	435b      	muls	r3, r3
 80010c4:	001a      	movs	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	189b      	adds	r3, r3, r2
 80010cc:	43db      	mvns	r3, r3
 80010ce:	400b      	ands	r3, r1
 80010d0:	001a      	movs	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	435b      	muls	r3, r3
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	434b      	muls	r3, r1
 80010da:	431a      	orrs	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b004      	add	sp, #16
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LL_GPIO_SetPinOutputType>:
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	43d2      	mvns	r2, r2
 80010fc:	401a      	ands	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	434b      	muls	r3, r1
 8001104:	431a      	orrs	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	605a      	str	r2, [r3, #4]
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}

08001112 <LL_GPIO_SetPinSpeed>:
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6899      	ldr	r1, [r3, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	435b      	muls	r3, r3
 8001126:	001a      	movs	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	189b      	adds	r3, r3, r2
 800112e:	43db      	mvns	r3, r3
 8001130:	400b      	ands	r3, r1
 8001132:	001a      	movs	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	435b      	muls	r3, r3
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	434b      	muls	r3, r1
 800113c:	431a      	orrs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	609a      	str	r2, [r3, #8]
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}

0800114a <LL_GPIO_SetPinPull>:
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	68d9      	ldr	r1, [r3, #12]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	435b      	muls	r3, r3
 800115e:	001a      	movs	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	189b      	adds	r3, r3, r2
 8001166:	43db      	mvns	r3, r3
 8001168:	400b      	ands	r3, r1
 800116a:	001a      	movs	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	435b      	muls	r3, r3
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	434b      	muls	r3, r1
 8001174:	431a      	orrs	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	60da      	str	r2, [r3, #12]
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}

08001182 <LL_GPIO_SetAFPin_0_7>:
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6a19      	ldr	r1, [r3, #32]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	435b      	muls	r3, r3
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	4353      	muls	r3, r2
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	435a      	muls	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	43db      	mvns	r3, r3
 80011a6:	400b      	ands	r3, r1
 80011a8:	001a      	movs	r2, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	435b      	muls	r3, r3
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	434b      	muls	r3, r1
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	434b      	muls	r3, r1
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	434b      	muls	r3, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	621a      	str	r2, [r3, #32]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b004      	add	sp, #16
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <LL_GPIO_SetAFPin_8_15>:
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	0a12      	lsrs	r2, r2, #8
 80011e0:	4353      	muls	r3, r2
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	0a12      	lsrs	r2, r2, #8
 80011e6:	4353      	muls	r3, r2
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	0a12      	lsrs	r2, r2, #8
 80011ec:	435a      	muls	r2, r3
 80011ee:	0013      	movs	r3, r2
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	43db      	mvns	r3, r3
 80011f6:	400b      	ands	r3, r1
 80011f8:	001a      	movs	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	0a09      	lsrs	r1, r1, #8
 8001202:	434b      	muls	r3, r1
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	0a09      	lsrs	r1, r1, #8
 8001208:	434b      	muls	r3, r1
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	0a09      	lsrs	r1, r1, #8
 800120e:	434b      	muls	r3, r1
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	434b      	muls	r3, r1
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b004      	add	sp, #16
 8001220:	bd80      	pop	{r7, pc}

08001222 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001230:	e048      	b.n	80012c4 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4091      	lsls	r1, r2
 800123c:	000a      	movs	r2, r1
 800123e:	4013      	ands	r3, r2
 8001240:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d03a      	beq.n	80012be <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d003      	beq.n	8001258 <LL_GPIO_Init+0x36>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d10e      	bne.n	8001276 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff ff56 	bl	8001112 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6819      	ldr	r1, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff ff39 	bl	80010e8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff ff63 	bl	800114a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d111      	bne.n	80012b0 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d807      	bhi.n	80012a2 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	0018      	movs	r0, r3
 800129c:	f7ff ff71 	bl	8001182 <LL_GPIO_SetAFPin_0_7>
 80012a0:	e006      	b.n	80012b0 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff ff8c 	bl	80011c8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff fef9 	bl	80010b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	40da      	lsrs	r2, r3
 80012cc:	1e13      	subs	r3, r2, #0
 80012ce:	d1b0      	bne.n	8001232 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <LL_SetSystemCoreClock+0x18>)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000000 	.word	0x20000000

080012f8 <__libc_init_array>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	2600      	movs	r6, #0
 80012fc:	4d0c      	ldr	r5, [pc, #48]	; (8001330 <__libc_init_array+0x38>)
 80012fe:	4c0d      	ldr	r4, [pc, #52]	; (8001334 <__libc_init_array+0x3c>)
 8001300:	1b64      	subs	r4, r4, r5
 8001302:	10a4      	asrs	r4, r4, #2
 8001304:	42a6      	cmp	r6, r4
 8001306:	d109      	bne.n	800131c <__libc_init_array+0x24>
 8001308:	2600      	movs	r6, #0
 800130a:	f000 f821 	bl	8001350 <_init>
 800130e:	4d0a      	ldr	r5, [pc, #40]	; (8001338 <__libc_init_array+0x40>)
 8001310:	4c0a      	ldr	r4, [pc, #40]	; (800133c <__libc_init_array+0x44>)
 8001312:	1b64      	subs	r4, r4, r5
 8001314:	10a4      	asrs	r4, r4, #2
 8001316:	42a6      	cmp	r6, r4
 8001318:	d105      	bne.n	8001326 <__libc_init_array+0x2e>
 800131a:	bd70      	pop	{r4, r5, r6, pc}
 800131c:	00b3      	lsls	r3, r6, #2
 800131e:	58eb      	ldr	r3, [r5, r3]
 8001320:	4798      	blx	r3
 8001322:	3601      	adds	r6, #1
 8001324:	e7ee      	b.n	8001304 <__libc_init_array+0xc>
 8001326:	00b3      	lsls	r3, r6, #2
 8001328:	58eb      	ldr	r3, [r5, r3]
 800132a:	4798      	blx	r3
 800132c:	3601      	adds	r6, #1
 800132e:	e7f2      	b.n	8001316 <__libc_init_array+0x1e>
 8001330:	08001368 	.word	0x08001368
 8001334:	08001368 	.word	0x08001368
 8001338:	08001368 	.word	0x08001368
 800133c:	0800136c 	.word	0x0800136c

08001340 <memset>:
 8001340:	0003      	movs	r3, r0
 8001342:	1882      	adds	r2, r0, r2
 8001344:	4293      	cmp	r3, r2
 8001346:	d100      	bne.n	800134a <memset+0xa>
 8001348:	4770      	bx	lr
 800134a:	7019      	strb	r1, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	e7f9      	b.n	8001344 <memset+0x4>

08001350 <_init>:
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001356:	bc08      	pop	{r3}
 8001358:	469e      	mov	lr, r3
 800135a:	4770      	bx	lr

0800135c <_fini>:
 800135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001362:	bc08      	pop	{r3}
 8001364:	469e      	mov	lr, r3
 8001366:	4770      	bx	lr
