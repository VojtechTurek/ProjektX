
ProjektX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001b0c  08001b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b3c  08001b3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b3c  08001b3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b3c  08001b3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b3c  08001b3c  00011b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001b50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001b50  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e97  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016cc  00000000  00000000  00027ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00029598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  00029ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fccc  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a54f  00000000  00000000  0003a40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060717  00000000  00000000  0004495b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000205c  00000000  00000000  000a50c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001af4 	.word	0x08001af4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001af4 	.word	0x08001af4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	4013      	ands	r3, r2
 8000236:	041a      	lsls	r2, r3, #16
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	43db      	mvns	r3, r3
 800023c:	6839      	ldr	r1, [r7, #0]
 800023e:	400b      	ands	r3, r1
 8000240:	431a      	orrs	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	619a      	str	r2, [r3, #24]
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	b004      	add	sp, #16
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <LedHandler_Init>:
static void LedHandler_TurnOnLED();

static void LedHandler_TurnOffLED();

void LedHandler_Init()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	timeMS = 0;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <LedHandler_Init+0x18>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
	prevTimeMS = 0;
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <LedHandler_Init+0x1c>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
}
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000028 	.word	0x20000028
 800026c:	2000002c 	.word	0x2000002c

08000270 <LedHandler_MainFunction>:

void LedHandler_MainFunction()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	/* get time in ms */
	timeMS = Os_GetMs();
 8000274:	f000 f81e 	bl	80002b4 <Os_GetMs>
 8000278:	0002      	movs	r2, r0
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <LedHandler_MainFunction+0x3c>)
 800027c:	601a      	str	r2, [r3, #0]

	/* delay 1 s */
	if (timeMS > LED_DELAY_TIME + prevTimeMS)
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <LedHandler_MainFunction+0x40>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	22fa      	movs	r2, #250	; 0xfa
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	189a      	adds	r2, r3, r2
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <LedHandler_MainFunction+0x3c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	429a      	cmp	r2, r3
 800028e:	d20a      	bcs.n	80002a6 <LedHandler_MainFunction+0x36>
	{

		prevTimeMS = Os_GetMs();
 8000290:	f000 f810 	bl	80002b4 <Os_GetMs>
 8000294:	0002      	movs	r2, r0
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <LedHandler_MainFunction+0x40>)
 8000298:	601a      	str	r2, [r3, #0]

		LL_GPIO_TogglePin(GPIOA, LED_Pin);
 800029a:	2390      	movs	r3, #144	; 0x90
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	2110      	movs	r1, #16
 80002a0:	0018      	movs	r0, r3
 80002a2:	f7ff ffbd 	bl	8000220 <LL_GPIO_TogglePin>
	}
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000028 	.word	0x20000028
 80002b0:	2000002c 	.word	0x2000002c

080002b4 <Os_GetMs>:
{

}

uint32_t Os_GetMs()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	return HAL_GetTick(); //LL_TIM_GetCounter();
 80002b8:	f000 fa00 	bl	80006bc <HAL_GetTick>
 80002bc:	0003      	movs	r3, r0
}
 80002be:	0018      	movs	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <LL_GPIO_ResetOutputPin>:
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	683a      	ldr	r2, [r7, #0]
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b002      	add	sp, #8
 80002da:	bd80      	pop	{r7, pc}

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <LL_AHB1_GRP1_EnableClock+0x28>)
 80002e6:	6959      	ldr	r1, [r3, #20]
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <LL_AHB1_GRP1_EnableClock+0x28>)
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	430a      	orrs	r2, r1
 80002ee:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <LL_AHB1_GRP1_EnableClock+0x28>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b004      	add	sp, #16
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030c:	f000 f97c 	bl	8000608 <HAL_Init>

  /* USER CODE BEGIN Init */
  LedHandler_Init();
 8000310:	f7ff ff9e 	bl	8000250 <LedHandler_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f807 	bl	8000326 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f8a2 	bl	8000460 <MX_GPIO_Init>
  MX_TIM1_Init();
 800031c:	f000 f844 	bl	80003a8 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  LedHandler_MainFunction();
 8000320:	f7ff ffa6 	bl	8000270 <LedHandler_MainFunction>
 8000324:	e7fc      	b.n	8000320 <main+0x18>

08000326 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000326:	b590      	push	{r4, r7, lr}
 8000328:	b091      	sub	sp, #68	; 0x44
 800032a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032c:	2410      	movs	r4, #16
 800032e:	193b      	adds	r3, r7, r4
 8000330:	0018      	movs	r0, r3
 8000332:	2330      	movs	r3, #48	; 0x30
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f001 fbd4 	bl	8001ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	003b      	movs	r3, r7
 800033e:	0018      	movs	r0, r3
 8000340:	2310      	movs	r3, #16
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f001 fbcd 	bl	8001ae4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	0021      	movs	r1, r4
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2202      	movs	r2, #2
 8000350:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2201      	movs	r2, #1
 8000356:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2210      	movs	r2, #16
 800035c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000364:	187b      	adds	r3, r7, r1
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fa90 	bl	800088c <HAL_RCC_OscConfig>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000370:	f000 f8a5 	bl	80004be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	003b      	movs	r3, r7
 8000376:	2207      	movs	r2, #7
 8000378:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800037a:	003b      	movs	r3, r7
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000380:	003b      	movs	r3, r7
 8000382:	22a0      	movs	r2, #160	; 0xa0
 8000384:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000386:	003b      	movs	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038c:	003b      	movs	r3, r7
 800038e:	2100      	movs	r1, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fd95 	bl	8000ec0 <HAL_RCC_ClockConfig>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x78>
  {
    Error_Handler();
 800039a:	f000 f890 	bl	80004be <Error_Handler>
  }
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b011      	add	sp, #68	; 0x44
 80003a4:	bd90      	pop	{r4, r7, pc}
	...

080003a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003ae:	230c      	movs	r3, #12
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	0018      	movs	r0, r3
 80003b4:	2314      	movs	r3, #20
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f001 fb93 	bl	8001ae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	0018      	movs	r0, r3
 80003c2:	2308      	movs	r3, #8
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f001 fb8c 	bl	8001ae4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_TIM1_Init+0xac>)
 80003ce:	4a22      	ldr	r2, [pc, #136]	; (8000458 <MX_TIM1_Init+0xb0>)
 80003d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003d2:	4b20      	ldr	r3, [pc, #128]	; (8000454 <MX_TIM1_Init+0xac>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_TIM1_Init+0xac>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_TIM1_Init+0xac>)
 80003e0:	4a1e      	ldr	r2, [pc, #120]	; (800045c <MX_TIM1_Init+0xb4>)
 80003e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_TIM1_Init+0xac>)
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_TIM1_Init+0xac>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_TIM1_Init+0xac>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_TIM1_Init+0xac>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fe84 	bl	8001108 <HAL_TIM_Base_Init>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000404:	f000 f85b 	bl	80004be <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000408:	210c      	movs	r1, #12
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000416:	187a      	adds	r2, r7, r1
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_TIM1_Init+0xac>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f000 ffd9 	bl	80013d4 <HAL_TIM_SlaveConfigSynchro>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000426:	f000 f84a 	bl	80004be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000436:	1d3a      	adds	r2, r7, #4
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_TIM1_Init+0xac>)
 800043a:	0011      	movs	r1, r2
 800043c:	0018      	movs	r0, r3
 800043e:	f001 f9b5 	bl	80017ac <HAL_TIMEx_MasterConfigSynchronization>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000446:	f000 f83a 	bl	80004be <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b008      	add	sp, #32
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	20000030 	.word	0x20000030
 8000458:	40012c00 	.word	0x40012c00
 800045c:	0000ffff 	.word	0x0000ffff

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	003b      	movs	r3, r7
 8000468:	0018      	movs	r0, r3
 800046a:	2318      	movs	r3, #24
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f001 fb38 	bl	8001ae4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	029b      	lsls	r3, r3, #10
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff ff2f 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 800047e:	2390      	movs	r3, #144	; 0x90
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	2110      	movs	r1, #16
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ff1d 	bl	80002c4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800048a:	003b      	movs	r3, r7
 800048c:	2210      	movs	r2, #16
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000490:	003b      	movs	r3, r7
 8000492:	2201      	movs	r2, #1
 8000494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000496:	003b      	movs	r3, r7
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800049c:	003b      	movs	r3, r7
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004a2:	003b      	movs	r3, r7
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004a8:	003a      	movs	r2, r7
 80004aa:	2390      	movs	r3, #144	; 0x90
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fa96 	bl	80019e2 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b006      	add	sp, #24
 80004bc:	bd80      	pop	{r7, pc}

080004be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c2:	b672      	cpsid	i
}
 80004c4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <Error_Handler+0x8>

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x44>)
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_MspInit+0x44>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	430a      	orrs	r2, r1
 80004d8:	619a      	str	r2, [r3, #24]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x44>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_MspInit+0x44>)
 80004e8:	69da      	ldr	r2, [r3, #28]
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_MspInit+0x44>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0549      	lsls	r1, r1, #21
 80004f0:	430a      	orrs	r2, r1
 80004f2:	61da      	str	r2, [r3, #28]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_MspInit+0x44>)
 80004f6:	69da      	ldr	r2, [r3, #28]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	055b      	lsls	r3, r3, #21
 80004fc:	4013      	ands	r3, r2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_TIM_Base_MspInit+0x48>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d115      	bne.n	800054e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_TIM_Base_MspInit+0x4c>)
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <HAL_TIM_Base_MspInit+0x4c>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0109      	lsls	r1, r1, #4
 800052c:	430a      	orrs	r2, r1
 800052e:	619a      	str	r2, [r3, #24]
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_TIM_Base_MspInit+0x4c>)
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200e      	movs	r0, #14
 8000544:	f000 f970 	bl	8000828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000548:	200e      	movs	r0, #14
 800054a:	f000 f982 	bl	8000852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b004      	add	sp, #16
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40012c00 	.word	0x40012c00
 800055c:	40021000 	.word	0x40021000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000584:	f000 f888 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <TIM1_CC_IRQHandler+0x14>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fe06 	bl	80011a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000030 	.word	0x20000030

080005a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b8:	f7ff fff6 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490d      	ldr	r1, [pc, #52]	; (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0a      	ldr	r4, [pc, #40]	; (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e2:	f001 fa5b 	bl	8001a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e6:	f7ff fe8f 	bl	8000308 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   r0, =_estack
 80005ec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f8:	08001b44 	.word	0x08001b44
  ldr r2, =_sbss
 80005fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000600:	2000007c 	.word	0x2000007c

08000604 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_IRQHandler>
	...

08000608 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <HAL_Init+0x24>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_Init+0x24>)
 8000612:	2110      	movs	r1, #16
 8000614:	430a      	orrs	r2, r1
 8000616:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f809 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061e:	f7ff ff53 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40022000 	.word	0x40022000

08000630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_InitTick+0x5c>)
 800063a:	681c      	ldr	r4, [r3, #0]
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_InitTick+0x60>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	0019      	movs	r1, r3
 8000642:	23fa      	movs	r3, #250	; 0xfa
 8000644:	0098      	lsls	r0, r3, #2
 8000646:	f7ff fd5f 	bl	8000108 <__udivsi3>
 800064a:	0003      	movs	r3, r0
 800064c:	0019      	movs	r1, r3
 800064e:	0020      	movs	r0, r4
 8000650:	f7ff fd5a 	bl	8000108 <__udivsi3>
 8000654:	0003      	movs	r3, r0
 8000656:	0018      	movs	r0, r3
 8000658:	f000 f90b 	bl	8000872 <HAL_SYSTICK_Config>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	e00f      	b.n	8000684 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d80b      	bhi.n	8000682 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	2200      	movs	r2, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f000 f8d8 	bl	8000828 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_InitTick+0x64>)
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	e000      	b.n	8000684 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	b003      	add	sp, #12
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	20000000 	.word	0x20000000
 8000690:	20000008 	.word	0x20000008
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x1c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	001a      	movs	r2, r3
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x20>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	18d2      	adds	r2, r2, r3
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_IncTick+0x20>)
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000078 	.word	0x20000078

080006bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <HAL_GetTick+0x10>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	20000078 	.word	0x20000078

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	0002      	movs	r2, r0
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b7f      	cmp	r3, #127	; 0x7f
 80006e2:	d809      	bhi.n	80006f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	001a      	movs	r2, r3
 80006ea:	231f      	movs	r3, #31
 80006ec:	401a      	ands	r2, r3
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_EnableIRQ+0x30>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	4091      	lsls	r1, r2
 80006f4:	000a      	movs	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
  }
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	0002      	movs	r2, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b7f      	cmp	r3, #127	; 0x7f
 8000718:	d828      	bhi.n	800076c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071a:	4a2f      	ldr	r2, [pc, #188]	; (80007d8 <__NVIC_SetPriority+0xd4>)
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b25b      	sxtb	r3, r3
 8000722:	089b      	lsrs	r3, r3, #2
 8000724:	33c0      	adds	r3, #192	; 0xc0
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	589b      	ldr	r3, [r3, r2]
 800072a:	1dfa      	adds	r2, r7, #7
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	0011      	movs	r1, r2
 8000730:	2203      	movs	r2, #3
 8000732:	400a      	ands	r2, r1
 8000734:	00d2      	lsls	r2, r2, #3
 8000736:	21ff      	movs	r1, #255	; 0xff
 8000738:	4091      	lsls	r1, r2
 800073a:	000a      	movs	r2, r1
 800073c:	43d2      	mvns	r2, r2
 800073e:	401a      	ands	r2, r3
 8000740:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	019b      	lsls	r3, r3, #6
 8000746:	22ff      	movs	r2, #255	; 0xff
 8000748:	401a      	ands	r2, r3
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	0018      	movs	r0, r3
 8000750:	2303      	movs	r3, #3
 8000752:	4003      	ands	r3, r0
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	481f      	ldr	r0, [pc, #124]	; (80007d8 <__NVIC_SetPriority+0xd4>)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b25b      	sxtb	r3, r3
 8000760:	089b      	lsrs	r3, r3, #2
 8000762:	430a      	orrs	r2, r1
 8000764:	33c0      	adds	r3, #192	; 0xc0
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800076a:	e031      	b.n	80007d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <__NVIC_SetPriority+0xd8>)
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	0019      	movs	r1, r3
 8000774:	230f      	movs	r3, #15
 8000776:	400b      	ands	r3, r1
 8000778:	3b08      	subs	r3, #8
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	3306      	adds	r3, #6
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	18d3      	adds	r3, r2, r3
 8000782:	3304      	adds	r3, #4
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1dfa      	adds	r2, r7, #7
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	0011      	movs	r1, r2
 800078c:	2203      	movs	r2, #3
 800078e:	400a      	ands	r2, r1
 8000790:	00d2      	lsls	r2, r2, #3
 8000792:	21ff      	movs	r1, #255	; 0xff
 8000794:	4091      	lsls	r1, r2
 8000796:	000a      	movs	r2, r1
 8000798:	43d2      	mvns	r2, r2
 800079a:	401a      	ands	r2, r3
 800079c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	22ff      	movs	r2, #255	; 0xff
 80007a4:	401a      	ands	r2, r3
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	0018      	movs	r0, r3
 80007ac:	2303      	movs	r3, #3
 80007ae:	4003      	ands	r3, r0
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <__NVIC_SetPriority+0xd8>)
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	001c      	movs	r4, r3
 80007bc:	230f      	movs	r3, #15
 80007be:	4023      	ands	r3, r4
 80007c0:	3b08      	subs	r3, #8
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	430a      	orrs	r2, r1
 80007c6:	3306      	adds	r3, #6
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	18c3      	adds	r3, r0, r3
 80007cc:	3304      	adds	r3, #4
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b003      	add	sp, #12
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	045b      	lsls	r3, r3, #17
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d301      	bcc.n	80007f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f4:	2301      	movs	r3, #1
 80007f6:	e010      	b.n	800081a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <SysTick_Config+0x44>)
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	3a01      	subs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000800:	2301      	movs	r3, #1
 8000802:	425b      	negs	r3, r3
 8000804:	2103      	movs	r1, #3
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff ff7c 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x44>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x44>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	210f      	movs	r1, #15
 8000834:	187b      	adds	r3, r7, r1
 8000836:	1c02      	adds	r2, r0, #0
 8000838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	187b      	adds	r3, r7, r1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25b      	sxtb	r3, r3
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ff5d 	bl	8000704 <__NVIC_SetPriority>
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b004      	add	sp, #16
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	0002      	movs	r2, r0
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff33 	bl	80006d0 <__NVIC_EnableIRQ>
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff ffaf 	bl	80007e0 <SysTick_Config>
 8000882:	0003      	movs	r3, r0
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}

0800088c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d101      	bne.n	800089e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e301      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	d100      	bne.n	80008aa <HAL_RCC_OscConfig+0x1e>
 80008a8:	e08d      	b.n	80009c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008aa:	4bc3      	ldr	r3, [pc, #780]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	220c      	movs	r2, #12
 80008b0:	4013      	ands	r3, r2
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d00e      	beq.n	80008d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b6:	4bc0      	ldr	r3, [pc, #768]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	220c      	movs	r2, #12
 80008bc:	4013      	ands	r3, r2
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d116      	bne.n	80008f0 <HAL_RCC_OscConfig+0x64>
 80008c2:	4bbd      	ldr	r3, [pc, #756]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	025b      	lsls	r3, r3, #9
 80008ca:	401a      	ands	r2, r3
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	025b      	lsls	r3, r3, #9
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d10d      	bne.n	80008f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d4:	4bb8      	ldr	r3, [pc, #736]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	029b      	lsls	r3, r3, #10
 80008dc:	4013      	ands	r3, r2
 80008de:	d100      	bne.n	80008e2 <HAL_RCC_OscConfig+0x56>
 80008e0:	e070      	b.n	80009c4 <HAL_RCC_OscConfig+0x138>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d000      	beq.n	80008ec <HAL_RCC_OscConfig+0x60>
 80008ea:	e06b      	b.n	80009c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e2d8      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d107      	bne.n	8000908 <HAL_RCC_OscConfig+0x7c>
 80008f8:	4baf      	ldr	r3, [pc, #700]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4bae      	ldr	r3, [pc, #696]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	0249      	lsls	r1, r1, #9
 8000902:	430a      	orrs	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e02f      	b.n	8000968 <HAL_RCC_OscConfig+0xdc>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10c      	bne.n	800092a <HAL_RCC_OscConfig+0x9e>
 8000910:	4ba9      	ldr	r3, [pc, #676]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4ba8      	ldr	r3, [pc, #672]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000916:	49a9      	ldr	r1, [pc, #676]	; (8000bbc <HAL_RCC_OscConfig+0x330>)
 8000918:	400a      	ands	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	4ba6      	ldr	r3, [pc, #664]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4ba5      	ldr	r3, [pc, #660]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000922:	49a7      	ldr	r1, [pc, #668]	; (8000bc0 <HAL_RCC_OscConfig+0x334>)
 8000924:	400a      	ands	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	e01e      	b.n	8000968 <HAL_RCC_OscConfig+0xdc>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b05      	cmp	r3, #5
 8000930:	d10e      	bne.n	8000950 <HAL_RCC_OscConfig+0xc4>
 8000932:	4ba1      	ldr	r3, [pc, #644]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4ba0      	ldr	r3, [pc, #640]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	02c9      	lsls	r1, r1, #11
 800093c:	430a      	orrs	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	4b9d      	ldr	r3, [pc, #628]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b9c      	ldr	r3, [pc, #624]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	0249      	lsls	r1, r1, #9
 800094a:	430a      	orrs	r2, r1
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e00b      	b.n	8000968 <HAL_RCC_OscConfig+0xdc>
 8000950:	4b99      	ldr	r3, [pc, #612]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b98      	ldr	r3, [pc, #608]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <HAL_RCC_OscConfig+0x330>)
 8000958:	400a      	ands	r2, r1
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	4b96      	ldr	r3, [pc, #600]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b95      	ldr	r3, [pc, #596]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000962:	4997      	ldr	r1, [pc, #604]	; (8000bc0 <HAL_RCC_OscConfig+0x334>)
 8000964:	400a      	ands	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d014      	beq.n	800099a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000970:	f7ff fea4 	bl	80006bc <HAL_GetTick>
 8000974:	0003      	movs	r3, r0
 8000976:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000978:	e008      	b.n	800098c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800097a:	f7ff fe9f 	bl	80006bc <HAL_GetTick>
 800097e:	0002      	movs	r2, r0
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b64      	cmp	r3, #100	; 0x64
 8000986:	d901      	bls.n	800098c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000988:	2303      	movs	r3, #3
 800098a:	e28a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098c:	4b8a      	ldr	r3, [pc, #552]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	029b      	lsls	r3, r3, #10
 8000994:	4013      	ands	r3, r2
 8000996:	d0f0      	beq.n	800097a <HAL_RCC_OscConfig+0xee>
 8000998:	e015      	b.n	80009c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800099a:	f7ff fe8f 	bl	80006bc <HAL_GetTick>
 800099e:	0003      	movs	r3, r0
 80009a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a2:	e008      	b.n	80009b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a4:	f7ff fe8a 	bl	80006bc <HAL_GetTick>
 80009a8:	0002      	movs	r2, r0
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2b64      	cmp	r3, #100	; 0x64
 80009b0:	d901      	bls.n	80009b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80009b2:	2303      	movs	r3, #3
 80009b4:	e275      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b6:	4b80      	ldr	r3, [pc, #512]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	029b      	lsls	r3, r3, #10
 80009be:	4013      	ands	r3, r2
 80009c0:	d1f0      	bne.n	80009a4 <HAL_RCC_OscConfig+0x118>
 80009c2:	e000      	b.n	80009c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2202      	movs	r2, #2
 80009cc:	4013      	ands	r3, r2
 80009ce:	d100      	bne.n	80009d2 <HAL_RCC_OscConfig+0x146>
 80009d0:	e069      	b.n	8000aa6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009d2:	4b79      	ldr	r3, [pc, #484]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	220c      	movs	r2, #12
 80009d8:	4013      	ands	r3, r2
 80009da:	d00b      	beq.n	80009f4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009dc:	4b76      	ldr	r3, [pc, #472]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	220c      	movs	r2, #12
 80009e2:	4013      	ands	r3, r2
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d11c      	bne.n	8000a22 <HAL_RCC_OscConfig+0x196>
 80009e8:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	025b      	lsls	r3, r3, #9
 80009f0:	4013      	ands	r3, r2
 80009f2:	d116      	bne.n	8000a22 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f4:	4b70      	ldr	r3, [pc, #448]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2202      	movs	r2, #2
 80009fa:	4013      	ands	r3, r2
 80009fc:	d005      	beq.n	8000a0a <HAL_RCC_OscConfig+0x17e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d001      	beq.n	8000a0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e24b      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0a:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	22f8      	movs	r2, #248	; 0xf8
 8000a10:	4393      	bics	r3, r2
 8000a12:	0019      	movs	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	00da      	lsls	r2, r3, #3
 8000a1a:	4b67      	ldr	r3, [pc, #412]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a20:	e041      	b.n	8000aa6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d024      	beq.n	8000a74 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a2a:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b62      	ldr	r3, [pc, #392]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a36:	f7ff fe41 	bl	80006bc <HAL_GetTick>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3e:	e008      	b.n	8000a52 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a40:	f7ff fe3c 	bl	80006bc <HAL_GetTick>
 8000a44:	0002      	movs	r2, r0
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d901      	bls.n	8000a52 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e227      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a52:	4b59      	ldr	r3, [pc, #356]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2202      	movs	r2, #2
 8000a58:	4013      	ands	r3, r2
 8000a5a:	d0f1      	beq.n	8000a40 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a5c:	4b56      	ldr	r3, [pc, #344]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	22f8      	movs	r2, #248	; 0xf8
 8000a62:	4393      	bics	r3, r2
 8000a64:	0019      	movs	r1, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	00da      	lsls	r2, r3, #3
 8000a6c:	4b52      	ldr	r3, [pc, #328]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e018      	b.n	8000aa6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a74:	4b50      	ldr	r3, [pc, #320]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	438a      	bics	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a80:	f7ff fe1c 	bl	80006bc <HAL_GetTick>
 8000a84:	0003      	movs	r3, r0
 8000a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a88:	e008      	b.n	8000a9c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a8a:	f7ff fe17 	bl	80006bc <HAL_GetTick>
 8000a8e:	0002      	movs	r2, r0
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d901      	bls.n	8000a9c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e202      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9c:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d1f1      	bne.n	8000a8a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2208      	movs	r2, #8
 8000aac:	4013      	ands	r3, r2
 8000aae:	d036      	beq.n	8000b1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d019      	beq.n	8000aec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ab8:	4b3f      	ldr	r3, [pc, #252]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000abc:	4b3e      	ldr	r3, [pc, #248]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac4:	f7ff fdfa 	bl	80006bc <HAL_GetTick>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000acc:	e008      	b.n	8000ae0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ace:	f7ff fdf5 	bl	80006bc <HAL_GetTick>
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d901      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e1e0      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d0f1      	beq.n	8000ace <HAL_RCC_OscConfig+0x242>
 8000aea:	e018      	b.n	8000b1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	438a      	bics	r2, r1
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af8:	f7ff fde0 	bl	80006bc <HAL_GetTick>
 8000afc:	0003      	movs	r3, r0
 8000afe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b00:	e008      	b.n	8000b14 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b02:	f7ff fddb 	bl	80006bc <HAL_GetTick>
 8000b06:	0002      	movs	r2, r0
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e1c6      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	2202      	movs	r2, #2
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d1f1      	bne.n	8000b02 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2204      	movs	r2, #4
 8000b24:	4013      	ands	r3, r2
 8000b26:	d100      	bne.n	8000b2a <HAL_RCC_OscConfig+0x29e>
 8000b28:	e0b4      	b.n	8000c94 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b2a:	201f      	movs	r0, #31
 8000b2c:	183b      	adds	r3, r7, r0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000b34:	69da      	ldr	r2, [r3, #28]
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	055b      	lsls	r3, r3, #21
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d110      	bne.n	8000b60 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000b40:	69da      	ldr	r2, [r3, #28]
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0549      	lsls	r1, r1, #21
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	61da      	str	r2, [r3, #28]
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000b4e:	69da      	ldr	r2, [r3, #28]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	055b      	lsls	r3, r3, #21
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b5a:	183b      	adds	r3, r7, r0
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_RCC_OscConfig+0x338>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d11a      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_RCC_OscConfig+0x338>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_RCC_OscConfig+0x338>)
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	0049      	lsls	r1, r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b7a:	f7ff fd9f 	bl	80006bc <HAL_GetTick>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b84:	f7ff fd9a 	bl	80006bc <HAL_GetTick>
 8000b88:	0002      	movs	r2, r0
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e185      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_RCC_OscConfig+0x338>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d10e      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x33c>
 8000baa:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000bac:	6a1a      	ldr	r2, [r3, #32]
 8000bae:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <HAL_RCC_OscConfig+0x32c>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	621a      	str	r2, [r3, #32]
 8000bb6:	e035      	b.n	8000c24 <HAL_RCC_OscConfig+0x398>
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	fffeffff 	.word	0xfffeffff
 8000bc0:	fffbffff 	.word	0xfffbffff
 8000bc4:	40007000 	.word	0x40007000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10c      	bne.n	8000bea <HAL_RCC_OscConfig+0x35e>
 8000bd0:	4bb6      	ldr	r3, [pc, #728]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000bd2:	6a1a      	ldr	r2, [r3, #32]
 8000bd4:	4bb5      	ldr	r3, [pc, #724]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	438a      	bics	r2, r1
 8000bda:	621a      	str	r2, [r3, #32]
 8000bdc:	4bb3      	ldr	r3, [pc, #716]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000bde:	6a1a      	ldr	r2, [r3, #32]
 8000be0:	4bb2      	ldr	r3, [pc, #712]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000be2:	2104      	movs	r1, #4
 8000be4:	438a      	bics	r2, r1
 8000be6:	621a      	str	r2, [r3, #32]
 8000be8:	e01c      	b.n	8000c24 <HAL_RCC_OscConfig+0x398>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b05      	cmp	r3, #5
 8000bf0:	d10c      	bne.n	8000c0c <HAL_RCC_OscConfig+0x380>
 8000bf2:	4bae      	ldr	r3, [pc, #696]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	4bad      	ldr	r3, [pc, #692]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	621a      	str	r2, [r3, #32]
 8000bfe:	4bab      	ldr	r3, [pc, #684]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c00:	6a1a      	ldr	r2, [r3, #32]
 8000c02:	4baa      	ldr	r3, [pc, #680]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	621a      	str	r2, [r3, #32]
 8000c0a:	e00b      	b.n	8000c24 <HAL_RCC_OscConfig+0x398>
 8000c0c:	4ba7      	ldr	r3, [pc, #668]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	4ba6      	ldr	r3, [pc, #664]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	438a      	bics	r2, r1
 8000c16:	621a      	str	r2, [r3, #32]
 8000c18:	4ba4      	ldr	r3, [pc, #656]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c1a:	6a1a      	ldr	r2, [r3, #32]
 8000c1c:	4ba3      	ldr	r3, [pc, #652]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c1e:	2104      	movs	r1, #4
 8000c20:	438a      	bics	r2, r1
 8000c22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d014      	beq.n	8000c56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2c:	f7ff fd46 	bl	80006bc <HAL_GetTick>
 8000c30:	0003      	movs	r3, r0
 8000c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c34:	e009      	b.n	8000c4a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c36:	f7ff fd41 	bl	80006bc <HAL_GetTick>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	4a9b      	ldr	r2, [pc, #620]	; (8000eb0 <HAL_RCC_OscConfig+0x624>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e12b      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c4a:	4b98      	ldr	r3, [pc, #608]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4013      	ands	r3, r2
 8000c52:	d0f0      	beq.n	8000c36 <HAL_RCC_OscConfig+0x3aa>
 8000c54:	e013      	b.n	8000c7e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c56:	f7ff fd31 	bl	80006bc <HAL_GetTick>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c5e:	e009      	b.n	8000c74 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c60:	f7ff fd2c 	bl	80006bc <HAL_GetTick>
 8000c64:	0002      	movs	r2, r0
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	4a91      	ldr	r2, [pc, #580]	; (8000eb0 <HAL_RCC_OscConfig+0x624>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e116      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c74:	4b8d      	ldr	r3, [pc, #564]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	2202      	movs	r2, #2
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c7e:	231f      	movs	r3, #31
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d105      	bne.n	8000c94 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c88:	4b88      	ldr	r3, [pc, #544]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c8a:	69da      	ldr	r2, [r3, #28]
 8000c8c:	4b87      	ldr	r3, [pc, #540]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000c8e:	4989      	ldr	r1, [pc, #548]	; (8000eb4 <HAL_RCC_OscConfig+0x628>)
 8000c90:	400a      	ands	r2, r1
 8000c92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2210      	movs	r2, #16
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d063      	beq.n	8000d66 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d12a      	bne.n	8000cfc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ca6:	4b81      	ldr	r3, [pc, #516]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000caa:	4b80      	ldr	r3, [pc, #512]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000cac:	2104      	movs	r1, #4
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000cb2:	4b7e      	ldr	r3, [pc, #504]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb6:	4b7d      	ldr	r3, [pc, #500]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fcfd 	bl	80006bc <HAL_GetTick>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cc8:	f7ff fcf8 	bl	80006bc <HAL_GetTick>
 8000ccc:	0002      	movs	r2, r0
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e0e3      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cda:	4b74      	ldr	r3, [pc, #464]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d0f1      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ce4:	4b71      	ldr	r3, [pc, #452]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce8:	22f8      	movs	r2, #248	; 0xf8
 8000cea:	4393      	bics	r3, r2
 8000cec:	0019      	movs	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	00da      	lsls	r2, r3, #3
 8000cf4:	4b6d      	ldr	r3, [pc, #436]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfa:	e034      	b.n	8000d66 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	3305      	adds	r3, #5
 8000d02:	d111      	bne.n	8000d28 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d04:	4b69      	ldr	r3, [pc, #420]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d08:	4b68      	ldr	r3, [pc, #416]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d10:	4b66      	ldr	r3, [pc, #408]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d14:	22f8      	movs	r2, #248	; 0xf8
 8000d16:	4393      	bics	r3, r2
 8000d18:	0019      	movs	r1, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	00da      	lsls	r2, r3, #3
 8000d20:	4b62      	ldr	r3, [pc, #392]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d22:	430a      	orrs	r2, r1
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
 8000d26:	e01e      	b.n	8000d66 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d28:	4b60      	ldr	r3, [pc, #384]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2c:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d2e:	2104      	movs	r1, #4
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d34:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d38:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	438a      	bics	r2, r1
 8000d3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d40:	f7ff fcbc 	bl	80006bc <HAL_GetTick>
 8000d44:	0003      	movs	r3, r0
 8000d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d4a:	f7ff fcb7 	bl	80006bc <HAL_GetTick>
 8000d4e:	0002      	movs	r2, r0
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e0a2      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d5c:	4b53      	ldr	r3, [pc, #332]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d60:	2202      	movs	r2, #2
 8000d62:	4013      	ands	r3, r2
 8000d64:	d1f1      	bne.n	8000d4a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <HAL_RCC_OscConfig+0x4e4>
 8000d6e:	e097      	b.n	8000ea0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d70:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	220c      	movs	r2, #12
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d100      	bne.n	8000d7e <HAL_RCC_OscConfig+0x4f2>
 8000d7c:	e06b      	b.n	8000e56 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d14c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b48      	ldr	r3, [pc, #288]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000d8c:	494a      	ldr	r1, [pc, #296]	; (8000eb8 <HAL_RCC_OscConfig+0x62c>)
 8000d8e:	400a      	ands	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d92:	f7ff fc93 	bl	80006bc <HAL_GetTick>
 8000d96:	0003      	movs	r3, r0
 8000d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d9c:	f7ff fc8e 	bl	80006bc <HAL_GetTick>
 8000da0:	0002      	movs	r2, r0
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e079      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	049b      	lsls	r3, r3, #18
 8000db6:	4013      	ands	r3, r2
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	4393      	bics	r3, r2
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4a3a      	ldr	r2, [pc, #232]	; (8000ebc <HAL_RCC_OscConfig+0x630>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	431a      	orrs	r2, r3
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000de4:	430a      	orrs	r2, r1
 8000de6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	0449      	lsls	r1, r1, #17
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df6:	f7ff fc61 	bl	80006bc <HAL_GetTick>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e00:	f7ff fc5c 	bl	80006bc <HAL_GetTick>
 8000e04:	0002      	movs	r2, r0
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e047      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	049b      	lsls	r3, r3, #18
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x574>
 8000e1e:	e03f      	b.n	8000ea0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000e26:	4924      	ldr	r1, [pc, #144]	; (8000eb8 <HAL_RCC_OscConfig+0x62c>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fc46 	bl	80006bc <HAL_GetTick>
 8000e30:	0003      	movs	r3, r0
 8000e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e36:	f7ff fc41 	bl	80006bc <HAL_GetTick>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e02c      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	049b      	lsls	r3, r3, #18
 8000e50:	4013      	ands	r3, r2
 8000e52:	d1f0      	bne.n	8000e36 <HAL_RCC_OscConfig+0x5aa>
 8000e54:	e024      	b.n	8000ea0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e01f      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_RCC_OscConfig+0x620>)
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	025b      	lsls	r3, r3, #9
 8000e74:	401a      	ands	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d10e      	bne.n	8000e9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	220f      	movs	r2, #15
 8000e82:	401a      	ands	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d107      	bne.n	8000e9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	23f0      	movs	r3, #240	; 0xf0
 8000e90:	039b      	lsls	r3, r3, #14
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d001      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b008      	add	sp, #32
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	00001388 	.word	0x00001388
 8000eb4:	efffffff 	.word	0xefffffff
 8000eb8:	feffffff 	.word	0xfeffffff
 8000ebc:	ffc2ffff 	.word	0xffc2ffff

08000ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e0b3      	b.n	800103c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ed4:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4013      	ands	r3, r2
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d911      	bls.n	8000f06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4393      	bics	r3, r2
 8000eea:	0019      	movs	r1, r3
 8000eec:	4b55      	ldr	r3, [pc, #340]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4013      	ands	r3, r2
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d001      	beq.n	8000f06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e09a      	b.n	800103c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d015      	beq.n	8000f3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2204      	movs	r2, #4
 8000f16:	4013      	ands	r3, r2
 8000f18:	d006      	beq.n	8000f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f1a:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f20:	21e0      	movs	r1, #224	; 0xe0
 8000f22:	00c9      	lsls	r1, r1, #3
 8000f24:	430a      	orrs	r2, r1
 8000f26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f28:	4b47      	ldr	r3, [pc, #284]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	22f0      	movs	r2, #240	; 0xf0
 8000f2e:	4393      	bics	r3, r2
 8000f30:	0019      	movs	r1, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	4b44      	ldr	r3, [pc, #272]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2201      	movs	r2, #1
 8000f42:	4013      	ands	r3, r2
 8000f44:	d040      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d107      	bne.n	8000f5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	029b      	lsls	r3, r3, #10
 8000f56:	4013      	ands	r3, r2
 8000f58:	d114      	bne.n	8000f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e06e      	b.n	800103c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d107      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	049b      	lsls	r3, r3, #18
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d108      	bne.n	8000f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e062      	b.n	800103c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f76:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e05b      	b.n	800103c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4393      	bics	r3, r2
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000f94:	430a      	orrs	r2, r1
 8000f96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f98:	f7ff fb90 	bl	80006bc <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa0:	e009      	b.n	8000fb6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa2:	f7ff fb8b 	bl	80006bc <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	4a27      	ldr	r2, [pc, #156]	; (800104c <HAL_RCC_ClockConfig+0x18c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e042      	b.n	800103c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	220c      	movs	r2, #12
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d1ec      	bne.n	8000fa2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d211      	bcs.n	8000ffa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4393      	bics	r3, r2
 8000fde:	0019      	movs	r1, r3
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_RCC_ClockConfig+0x184>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2201      	movs	r2, #1
 8000fee:	4013      	ands	r3, r2
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d001      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e020      	b.n	800103c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2204      	movs	r2, #4
 8001000:	4013      	ands	r3, r2
 8001002:	d009      	beq.n	8001018 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4a11      	ldr	r2, [pc, #68]	; (8001050 <HAL_RCC_ClockConfig+0x190>)
 800100a:	4013      	ands	r3, r2
 800100c:	0019      	movs	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8001014:	430a      	orrs	r2, r1
 8001016:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001018:	f000 f820 	bl	800105c <HAL_RCC_GetSysClockFreq>
 800101c:	0001      	movs	r1, r0
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_RCC_ClockConfig+0x188>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	220f      	movs	r2, #15
 8001026:	4013      	ands	r3, r2
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_RCC_ClockConfig+0x194>)
 800102a:	5cd3      	ldrb	r3, [r2, r3]
 800102c:	000a      	movs	r2, r1
 800102e:	40da      	lsrs	r2, r3
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_RCC_ClockConfig+0x198>)
 8001032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001034:	2003      	movs	r0, #3
 8001036:	f7ff fafb 	bl	8000630 <HAL_InitTick>
  
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b004      	add	sp, #16
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40022000 	.word	0x40022000
 8001048:	40021000 	.word	0x40021000
 800104c:	00001388 	.word	0x00001388
 8001050:	fffff8ff 	.word	0xfffff8ff
 8001054:	08001b0c 	.word	0x08001b0c
 8001058:	20000000 	.word	0x20000000

0800105c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	220c      	movs	r2, #12
 8001080:	4013      	ands	r3, r2
 8001082:	2b04      	cmp	r3, #4
 8001084:	d002      	beq.n	800108c <HAL_RCC_GetSysClockFreq+0x30>
 8001086:	2b08      	cmp	r3, #8
 8001088:	d003      	beq.n	8001092 <HAL_RCC_GetSysClockFreq+0x36>
 800108a:	e02c      	b.n	80010e6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800108e:	613b      	str	r3, [r7, #16]
      break;
 8001090:	e02c      	b.n	80010ec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	220f      	movs	r2, #15
 8001098:	4013      	ands	r3, r2
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_RCC_GetSysClockFreq+0xa4>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	220f      	movs	r2, #15
 80010a6:	4013      	ands	r3, r2
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <HAL_RCC_GetSysClockFreq+0xa8>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	025b      	lsls	r3, r3, #9
 80010b4:	4013      	ands	r3, r2
 80010b6:	d009      	beq.n	80010cc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80010bc:	f7ff f824 	bl	8000108 <__udivsi3>
 80010c0:	0003      	movs	r3, r0
 80010c2:	001a      	movs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4353      	muls	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	000a      	movs	r2, r1
 80010d0:	0152      	lsls	r2, r2, #5
 80010d2:	1a52      	subs	r2, r2, r1
 80010d4:	0193      	lsls	r3, r2, #6
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	185b      	adds	r3, r3, r1
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
      break;
 80010e4:	e002      	b.n	80010ec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80010e8:	613b      	str	r3, [r7, #16]
      break;
 80010ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80010ec:	693b      	ldr	r3, [r7, #16]
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b006      	add	sp, #24
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40021000 	.word	0x40021000
 80010fc:	007a1200 	.word	0x007a1200
 8001100:	08001b1c 	.word	0x08001b1c
 8001104:	08001b2c 	.word	0x08001b2c

08001108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e042      	b.n	80011a0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	223d      	movs	r2, #61	; 0x3d
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	223c      	movs	r2, #60	; 0x3c
 800112a:	2100      	movs	r1, #0
 800112c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff f9ed 	bl	8000510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	223d      	movs	r2, #61	; 0x3d
 800113a:	2102      	movs	r1, #2
 800113c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	0019      	movs	r1, r3
 8001148:	0010      	movs	r0, r2
 800114a:	f000 f9b1 	bl	80014b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2246      	movs	r2, #70	; 0x46
 8001152:	2101      	movs	r1, #1
 8001154:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	223e      	movs	r2, #62	; 0x3e
 800115a:	2101      	movs	r1, #1
 800115c:	5499      	strb	r1, [r3, r2]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	223f      	movs	r2, #63	; 0x3f
 8001162:	2101      	movs	r1, #1
 8001164:	5499      	strb	r1, [r3, r2]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	2101      	movs	r1, #1
 800116c:	5499      	strb	r1, [r3, r2]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2241      	movs	r2, #65	; 0x41
 8001172:	2101      	movs	r1, #1
 8001174:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2242      	movs	r2, #66	; 0x42
 800117a:	2101      	movs	r1, #1
 800117c:	5499      	strb	r1, [r3, r2]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2243      	movs	r2, #67	; 0x43
 8001182:	2101      	movs	r1, #1
 8001184:	5499      	strb	r1, [r3, r2]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2244      	movs	r2, #68	; 0x44
 800118a:	2101      	movs	r1, #1
 800118c:	5499      	strb	r1, [r3, r2]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2245      	movs	r2, #69	; 0x45
 8001192:	2101      	movs	r1, #1
 8001194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	223d      	movs	r2, #61	; 0x3d
 800119a:	2101      	movs	r1, #1
 800119c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2202      	movs	r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d124      	bne.n	8001208 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2202      	movs	r2, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d11d      	bne.n	8001208 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2203      	movs	r2, #3
 80011d2:	4252      	negs	r2, r2
 80011d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2203      	movs	r2, #3
 80011e4:	4013      	ands	r3, r2
 80011e6:	d004      	beq.n	80011f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f948 	bl	8001480 <HAL_TIM_IC_CaptureCallback>
 80011f0:	e007      	b.n	8001202 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f93b 	bl	8001470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 f947 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2204      	movs	r2, #4
 8001210:	4013      	ands	r3, r2
 8001212:	2b04      	cmp	r3, #4
 8001214:	d125      	bne.n	8001262 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2204      	movs	r2, #4
 800121e:	4013      	ands	r3, r2
 8001220:	2b04      	cmp	r3, #4
 8001222:	d11e      	bne.n	8001262 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2205      	movs	r2, #5
 800122a:	4252      	negs	r2, r2
 800122c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2202      	movs	r2, #2
 8001232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	23c0      	movs	r3, #192	; 0xc0
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d004      	beq.n	800124c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f000 f91b 	bl	8001480 <HAL_TIM_IC_CaptureCallback>
 800124a:	e007      	b.n	800125c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f90e 	bl	8001470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0018      	movs	r0, r3
 8001258:	f000 f91a 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2208      	movs	r2, #8
 800126a:	4013      	ands	r3, r2
 800126c:	2b08      	cmp	r3, #8
 800126e:	d124      	bne.n	80012ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2208      	movs	r2, #8
 8001278:	4013      	ands	r3, r2
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11d      	bne.n	80012ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2209      	movs	r2, #9
 8001284:	4252      	negs	r2, r2
 8001286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2204      	movs	r2, #4
 800128c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	d004      	beq.n	80012a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f000 f8ef 	bl	8001480 <HAL_TIM_IC_CaptureCallback>
 80012a2:	e007      	b.n	80012b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 f8e2 	bl	8001470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 f8ee 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2210      	movs	r2, #16
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d125      	bne.n	8001314 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2210      	movs	r2, #16
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d11e      	bne.n	8001314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2211      	movs	r2, #17
 80012dc:	4252      	negs	r2, r2
 80012de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2208      	movs	r2, #8
 80012e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	23c0      	movs	r3, #192	; 0xc0
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	d004      	beq.n	80012fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 f8c2 	bl	8001480 <HAL_TIM_IC_CaptureCallback>
 80012fc:	e007      	b.n	800130e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f000 f8b5 	bl	8001470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f000 f8c1 	bl	8001490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2201      	movs	r2, #1
 800131c:	4013      	ands	r3, r2
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10f      	bne.n	8001342 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	2b01      	cmp	r3, #1
 800132e:	d108      	bne.n	8001342 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2202      	movs	r2, #2
 8001336:	4252      	negs	r2, r2
 8001338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0018      	movs	r0, r3
 800133e:	f000 f88f 	bl	8001460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	4013      	ands	r3, r2
 800134c:	2b80      	cmp	r3, #128	; 0x80
 800134e:	d10f      	bne.n	8001370 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	4013      	ands	r3, r2
 800135a:	2b80      	cmp	r3, #128	; 0x80
 800135c:	d108      	bne.n	8001370 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2281      	movs	r2, #129	; 0x81
 8001364:	4252      	negs	r2, r2
 8001366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	0018      	movs	r0, r3
 800136c:	f000 fa78 	bl	8001860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	4013      	ands	r3, r2
 800137a:	2b40      	cmp	r3, #64	; 0x40
 800137c:	d10f      	bne.n	800139e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2240      	movs	r2, #64	; 0x40
 8001386:	4013      	ands	r3, r2
 8001388:	2b40      	cmp	r3, #64	; 0x40
 800138a:	d108      	bne.n	800139e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2241      	movs	r2, #65	; 0x41
 8001392:	4252      	negs	r2, r2
 8001394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0018      	movs	r0, r3
 800139a:	f000 f881 	bl	80014a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2220      	movs	r2, #32
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d10f      	bne.n	80013cc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2220      	movs	r2, #32
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d108      	bne.n	80013cc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2221      	movs	r2, #33	; 0x21
 80013c0:	4252      	negs	r2, r2
 80013c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f000 fa42 	bl	8001850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	223c      	movs	r2, #60	; 0x3c
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_TIM_SlaveConfigSynchro+0x18>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e032      	b.n	8001452 <HAL_TIM_SlaveConfigSynchro+0x7e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	223c      	movs	r2, #60	; 0x3c
 80013f0:	2101      	movs	r1, #1
 80013f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	223d      	movs	r2, #61	; 0x3d
 80013f8:	2102      	movs	r1, #2
 80013fa:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0011      	movs	r1, r2
 8001402:	0018      	movs	r0, r3
 8001404:	f000 f8c0 	bl	8001588 <TIM_SlaveTimer_SetConfig>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d009      	beq.n	8001420 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	223d      	movs	r2, #61	; 0x3d
 8001410:	2101      	movs	r1, #1
 8001412:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	223c      	movs	r2, #60	; 0x3c
 8001418:	2100      	movs	r1, #0
 800141a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e018      	b.n	8001452 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	438a      	bics	r2, r1
 800142e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <HAL_TIM_SlaveConfigSynchro+0x88>)
 800143c:	400a      	ands	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	223d      	movs	r2, #61	; 0x3d
 8001444:	2101      	movs	r1, #1
 8001446:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	223c      	movs	r2, #60	; 0x3c
 800144c:	2100      	movs	r1, #0
 800144e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	ffffbfff 	.word	0xffffbfff

08001460 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <TIM_Base_SetConfig+0xc0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d003      	beq.n	80014d0 <TIM_Base_SetConfig+0x20>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <TIM_Base_SetConfig+0xc4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d108      	bne.n	80014e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2270      	movs	r2, #112	; 0x70
 80014d4:	4393      	bics	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <TIM_Base_SetConfig+0xc0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00f      	beq.n	800150a <TIM_Base_SetConfig+0x5a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <TIM_Base_SetConfig+0xc4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00b      	beq.n	800150a <TIM_Base_SetConfig+0x5a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <TIM_Base_SetConfig+0xc8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <TIM_Base_SetConfig+0x5a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a1f      	ldr	r2, [pc, #124]	; (800157c <TIM_Base_SetConfig+0xcc>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d003      	beq.n	800150a <TIM_Base_SetConfig+0x5a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <TIM_Base_SetConfig+0xd0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d108      	bne.n	800151c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <TIM_Base_SetConfig+0xd4>)
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	4393      	bics	r3, r2
 8001522:	001a      	movs	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <TIM_Base_SetConfig+0xc0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <TIM_Base_SetConfig+0xaa>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <TIM_Base_SetConfig+0xcc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d003      	beq.n	800155a <TIM_Base_SetConfig+0xaa>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <TIM_Base_SetConfig+0xd0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d103      	bne.n	8001562 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	615a      	str	r2, [r3, #20]
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40012c00 	.word	0x40012c00
 8001574:	40000400 	.word	0x40000400
 8001578:	40002000 	.word	0x40002000
 800157c:	40014400 	.word	0x40014400
 8001580:	40014800 	.word	0x40014800
 8001584:	fffffcff 	.word	0xfffffcff

08001588 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001592:	2317      	movs	r3, #23
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2270      	movs	r2, #112	; 0x70
 80015a6:	4393      	bics	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2207      	movs	r2, #7
 80015b8:	4393      	bics	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b70      	cmp	r3, #112	; 0x70
 80015d4:	d015      	beq.n	8001602 <TIM_SlaveTimer_SetConfig+0x7a>
 80015d6:	d900      	bls.n	80015da <TIM_SlaveTimer_SetConfig+0x52>
 80015d8:	e05b      	b.n	8001692 <TIM_SlaveTimer_SetConfig+0x10a>
 80015da:	2b60      	cmp	r3, #96	; 0x60
 80015dc:	d04f      	beq.n	800167e <TIM_SlaveTimer_SetConfig+0xf6>
 80015de:	d858      	bhi.n	8001692 <TIM_SlaveTimer_SetConfig+0x10a>
 80015e0:	2b50      	cmp	r3, #80	; 0x50
 80015e2:	d042      	beq.n	800166a <TIM_SlaveTimer_SetConfig+0xe2>
 80015e4:	d855      	bhi.n	8001692 <TIM_SlaveTimer_SetConfig+0x10a>
 80015e6:	2b40      	cmp	r3, #64	; 0x40
 80015e8:	d016      	beq.n	8001618 <TIM_SlaveTimer_SetConfig+0x90>
 80015ea:	d852      	bhi.n	8001692 <TIM_SlaveTimer_SetConfig+0x10a>
 80015ec:	2b30      	cmp	r3, #48	; 0x30
 80015ee:	d055      	beq.n	800169c <TIM_SlaveTimer_SetConfig+0x114>
 80015f0:	d84f      	bhi.n	8001692 <TIM_SlaveTimer_SetConfig+0x10a>
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d052      	beq.n	800169c <TIM_SlaveTimer_SetConfig+0x114>
 80015f6:	d84c      	bhi.n	8001692 <TIM_SlaveTimer_SetConfig+0x10a>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d04f      	beq.n	800169c <TIM_SlaveTimer_SetConfig+0x114>
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d04d      	beq.n	800169c <TIM_SlaveTimer_SetConfig+0x114>
 8001600:	e047      	b.n	8001692 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68d9      	ldr	r1, [r3, #12]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f000 f8ab 	bl	800176c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8001616:	e042      	b.n	800169e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d101      	bne.n	8001624 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e03f      	b.n	80016a4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	438a      	bics	r2, r1
 800163a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	22f0      	movs	r2, #240	; 0xf0
 8001648:	4393      	bics	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	4313      	orrs	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	621a      	str	r2, [r3, #32]
      break;
 8001668:	e019      	b.n	800169e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	001a      	movs	r2, r3
 8001678:	f000 f818 	bl	80016ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800167c:	e00f      	b.n	800169e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	6899      	ldr	r1, [r3, #8]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	001a      	movs	r2, r3
 800168c:	f000 f83c 	bl	8001708 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001690:	e005      	b.n	800169e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001692:	2317      	movs	r3, #23
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
      break;
 800169a:	e000      	b.n	800169e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800169c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800169e:	2317      	movs	r3, #23
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	781b      	ldrb	r3, [r3, #0]
}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b006      	add	sp, #24
 80016aa:	bd80      	pop	{r7, pc}

080016ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4393      	bics	r3, r2
 80016c6:	001a      	movs	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	22f0      	movs	r2, #240	; 0xf0
 80016d6:	4393      	bics	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	220a      	movs	r2, #10
 80016e8:	4393      	bics	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	621a      	str	r2, [r3, #32]
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}

08001708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	2210      	movs	r2, #16
 800171a:	4393      	bics	r3, r2
 800171c:	001a      	movs	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <TIM_TI2_ConfigInputStage+0x60>)
 8001732:	4013      	ands	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	031b      	lsls	r3, r3, #12
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	22a0      	movs	r2, #160	; 0xa0
 8001744:	4393      	bics	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	621a      	str	r2, [r3, #32]
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b006      	add	sp, #24
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	ffff0fff 	.word	0xffff0fff

0800176c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <TIM_ETR_SetConfig+0x3c>)
 8001784:	4013      	ands	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	021a      	lsls	r2, r3, #8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	431a      	orrs	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	609a      	str	r2, [r3, #8]
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b006      	add	sp, #24
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	ffff00ff 	.word	0xffff00ff

080017ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	223c      	movs	r2, #60	; 0x3c
 80017ba:	5c9b      	ldrb	r3, [r3, r2]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e03c      	b.n	800183e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	223c      	movs	r2, #60	; 0x3c
 80017c8:	2101      	movs	r1, #1
 80017ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	223d      	movs	r2, #61	; 0x3d
 80017d0:	2102      	movs	r1, #2
 80017d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2270      	movs	r2, #112	; 0x70
 80017e8:	4393      	bics	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d004      	beq.n	8001812 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10c      	bne.n	800182c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	4393      	bics	r3, r2
 8001818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4313      	orrs	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	223d      	movs	r2, #61	; 0x3d
 8001830:	2101      	movs	r1, #1
 8001832:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	223c      	movs	r2, #60	; 0x3c
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40000400 	.word	0x40000400

08001850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <LL_GPIO_SetPinMode>:
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	435b      	muls	r3, r3
 8001884:	001a      	movs	r2, r3
 8001886:	0013      	movs	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	189b      	adds	r3, r3, r2
 800188c:	43db      	mvns	r3, r3
 800188e:	400b      	ands	r3, r1
 8001890:	001a      	movs	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	435b      	muls	r3, r3
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	434b      	muls	r3, r1
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <LL_GPIO_SetPinOutputType>:
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	43d2      	mvns	r2, r2
 80018bc:	401a      	ands	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	434b      	muls	r3, r1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	605a      	str	r2, [r3, #4]
}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <LL_GPIO_SetPinSpeed>:
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6899      	ldr	r1, [r3, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	435b      	muls	r3, r3
 80018e6:	001a      	movs	r2, r3
 80018e8:	0013      	movs	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	189b      	adds	r3, r3, r2
 80018ee:	43db      	mvns	r3, r3
 80018f0:	400b      	ands	r3, r1
 80018f2:	001a      	movs	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	435b      	muls	r3, r3
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	434b      	muls	r3, r1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	609a      	str	r2, [r3, #8]
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}

0800190a <LL_GPIO_SetPinPull>:
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	68d9      	ldr	r1, [r3, #12]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	435b      	muls	r3, r3
 800191e:	001a      	movs	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	189b      	adds	r3, r3, r2
 8001926:	43db      	mvns	r3, r3
 8001928:	400b      	ands	r3, r1
 800192a:	001a      	movs	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	435b      	muls	r3, r3
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	434b      	muls	r3, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	60da      	str	r2, [r3, #12]
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}

08001942 <LL_GPIO_SetAFPin_0_7>:
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a19      	ldr	r1, [r3, #32]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	435b      	muls	r3, r3
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4353      	muls	r3, r2
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	435a      	muls	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	43db      	mvns	r3, r3
 8001966:	400b      	ands	r3, r1
 8001968:	001a      	movs	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	435b      	muls	r3, r3
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	434b      	muls	r3, r1
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	434b      	muls	r3, r1
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	434b      	muls	r3, r1
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	621a      	str	r2, [r3, #32]
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}

08001988 <LL_GPIO_SetAFPin_8_15>:
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	0a12      	lsrs	r2, r2, #8
 80019a0:	4353      	muls	r3, r2
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	0a12      	lsrs	r2, r2, #8
 80019a6:	4353      	muls	r3, r2
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	0a12      	lsrs	r2, r2, #8
 80019ac:	435a      	muls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	43db      	mvns	r3, r3
 80019b6:	400b      	ands	r3, r1
 80019b8:	001a      	movs	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	0a09      	lsrs	r1, r1, #8
 80019c2:	434b      	muls	r3, r1
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	0a09      	lsrs	r1, r1, #8
 80019c8:	434b      	muls	r3, r1
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	0a09      	lsrs	r1, r1, #8
 80019ce:	434b      	muls	r3, r1
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	434b      	muls	r3, r1
 80019d4:	431a      	orrs	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b004      	add	sp, #16
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80019f0:	e048      	b.n	8001a84 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2101      	movs	r1, #1
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4091      	lsls	r1, r2
 80019fc:	000a      	movs	r2, r1
 80019fe:	4013      	ands	r3, r2
 8001a00:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d03a      	beq.n	8001a7e <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d003      	beq.n	8001a18 <LL_GPIO_Init+0x36>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d10e      	bne.n	8001a36 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ff56 	bl	80018d2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff ff39 	bl	80018a8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff ff63 	bl	800190a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d111      	bne.n	8001a70 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d807      	bhi.n	8001a62 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff ff71 	bl	8001942 <LL_GPIO_SetAFPin_0_7>
 8001a60:	e006      	b.n	8001a70 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff ff8c 	bl	8001988 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff fef9 	bl	8001870 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	1e13      	subs	r3, r2, #0
 8001a8e:	d1b0      	bne.n	80019f2 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b004      	add	sp, #16
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <__libc_init_array>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	2600      	movs	r6, #0
 8001aa0:	4d0c      	ldr	r5, [pc, #48]	; (8001ad4 <__libc_init_array+0x38>)
 8001aa2:	4c0d      	ldr	r4, [pc, #52]	; (8001ad8 <__libc_init_array+0x3c>)
 8001aa4:	1b64      	subs	r4, r4, r5
 8001aa6:	10a4      	asrs	r4, r4, #2
 8001aa8:	42a6      	cmp	r6, r4
 8001aaa:	d109      	bne.n	8001ac0 <__libc_init_array+0x24>
 8001aac:	2600      	movs	r6, #0
 8001aae:	f000 f821 	bl	8001af4 <_init>
 8001ab2:	4d0a      	ldr	r5, [pc, #40]	; (8001adc <__libc_init_array+0x40>)
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <__libc_init_array+0x44>)
 8001ab6:	1b64      	subs	r4, r4, r5
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	42a6      	cmp	r6, r4
 8001abc:	d105      	bne.n	8001aca <__libc_init_array+0x2e>
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	00b3      	lsls	r3, r6, #2
 8001ac2:	58eb      	ldr	r3, [r5, r3]
 8001ac4:	4798      	blx	r3
 8001ac6:	3601      	adds	r6, #1
 8001ac8:	e7ee      	b.n	8001aa8 <__libc_init_array+0xc>
 8001aca:	00b3      	lsls	r3, r6, #2
 8001acc:	58eb      	ldr	r3, [r5, r3]
 8001ace:	4798      	blx	r3
 8001ad0:	3601      	adds	r6, #1
 8001ad2:	e7f2      	b.n	8001aba <__libc_init_array+0x1e>
 8001ad4:	08001b3c 	.word	0x08001b3c
 8001ad8:	08001b3c 	.word	0x08001b3c
 8001adc:	08001b3c 	.word	0x08001b3c
 8001ae0:	08001b40 	.word	0x08001b40

08001ae4 <memset>:
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	1882      	adds	r2, r0, r2
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d100      	bne.n	8001aee <memset+0xa>
 8001aec:	4770      	bx	lr
 8001aee:	7019      	strb	r1, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	e7f9      	b.n	8001ae8 <memset+0x4>

08001af4 <_init>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001afa:	bc08      	pop	{r3}
 8001afc:	469e      	mov	lr, r3
 8001afe:	4770      	bx	lr

08001b00 <_fini>:
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b06:	bc08      	pop	{r3}
 8001b08:	469e      	mov	lr, r3
 8001b0a:	4770      	bx	lr
