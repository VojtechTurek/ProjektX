
ProjektX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013bc  080013bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013bc  080013bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080013bc  080013bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013bc  080013bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013bc  080013bc  000113bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013c0  080013c0  000113c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080013c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080013d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080013d0  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d40  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001656  00000000  00000000  00027d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  000293d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  00029d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb90  00000000  00000000  0002a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009da3  00000000  00000000  0003a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006109b  00000000  00000000  00043fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b0  00000000  00000000  000a50b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080013a4 	.word	0x080013a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080013a4 	.word	0x080013a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	4013      	ands	r3, r2
 8000236:	041a      	lsls	r2, r3, #16
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	43db      	mvns	r3, r3
 800023c:	6839      	ldr	r1, [r7, #0]
 800023e:	400b      	ands	r3, r1
 8000240:	431a      	orrs	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	619a      	str	r2, [r3, #24]
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	b004      	add	sp, #16
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <LedHandler_Init>:
static void LedHandler_TurnOnLED();

static void LedHandler_TurnOffLED();

void LedHandler_Init()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	timeMS = 0;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <LedHandler_Init+0x18>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
	prevTimeMS = 0;
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <LedHandler_Init+0x1c>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
}
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000028 	.word	0x20000028
 800026c:	2000002c 	.word	0x2000002c

08000270 <LedHandler_MainFunction>:

void LedHandler_MainFunction()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	/* get time in ms */
	timeMS = HAL_GetTick();
 8000274:	f000 faaa 	bl	80007cc <HAL_GetTick>
 8000278:	0002      	movs	r2, r0
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <LedHandler_MainFunction+0x3c>)
 800027c:	601a      	str	r2, [r3, #0]

	/* delay 1 s */
	if (timeMS > LED_DELAY_TIME + prevTimeMS)
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <LedHandler_MainFunction+0x40>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	22fa      	movs	r2, #250	; 0xfa
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	189a      	adds	r2, r3, r2
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <LedHandler_MainFunction+0x3c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	429a      	cmp	r2, r3
 800028e:	d20a      	bcs.n	80002a6 <LedHandler_MainFunction+0x36>
	{

		prevTimeMS = HAL_GetTick();
 8000290:	f000 fa9c 	bl	80007cc <HAL_GetTick>
 8000294:	0002      	movs	r2, r0
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <LedHandler_MainFunction+0x40>)
 8000298:	601a      	str	r2, [r3, #0]

		LL_GPIO_TogglePin(GPIOA, LED_Pin);
 800029a:	2390      	movs	r3, #144	; 0x90
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	2110      	movs	r1, #16
 80002a0:	0018      	movs	r0, r3
 80002a2:	f7ff ffbd 	bl	8000220 <LL_GPIO_TogglePin>
	}
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000028 	.word	0x20000028
 80002b0:	2000002c 	.word	0x2000002c

080002b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <LL_RCC_HSI_Enable+0x18>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <LL_RCC_HSI_Enable+0x18>)
 80002be:	2101      	movs	r1, #1
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <LL_RCC_HSI_IsReady+0x1c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2202      	movs	r2, #2
 80002da:	4013      	ands	r3, r2
 80002dc:	3b02      	subs	r3, #2
 80002de:	425a      	negs	r2, r3
 80002e0:	4153      	adcs	r3, r2
 80002e2:	b2db      	uxtb	r3, r3
}
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000

080002f0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	22f8      	movs	r2, #248	; 0xf8
 80002fe:	4393      	bics	r3, r2
 8000300:	0019      	movs	r1, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	00da      	lsls	r2, r3, #3
 8000306:	4b03      	ldr	r3, [pc, #12]	; (8000314 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000308:	430a      	orrs	r2, r1
 800030a:	601a      	str	r2, [r3, #0]
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40021000 	.word	0x40021000

08000318 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <LL_RCC_SetSysClkSource+0x24>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	2203      	movs	r2, #3
 8000326:	4393      	bics	r3, r2
 8000328:	0019      	movs	r1, r3
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <LL_RCC_SetSysClkSource+0x24>)
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	430a      	orrs	r2, r1
 8000330:	605a      	str	r2, [r3, #4]
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b002      	add	sp, #8
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000

08000340 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <LL_RCC_GetSysClkSource+0x14>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	220c      	movs	r2, #12
 800034a:	4013      	ands	r3, r2
}
 800034c:	0018      	movs	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	40021000 	.word	0x40021000

08000358 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	22f0      	movs	r2, #240	; 0xf0
 8000366:	4393      	bics	r3, r2
 8000368:	0019      	movs	r1, r3
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	430a      	orrs	r2, r1
 8000370:	605a      	str	r2, [r3, #4]
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <LL_RCC_SetAPB1Prescaler+0x28>)
 800038e:	4013      	ands	r3, r2
 8000390:	0019      	movs	r1, r3
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	430a      	orrs	r2, r1
 8000398:	605a      	str	r2, [r3, #4]
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000
 80003a8:	fffff8ff 	.word	0xfffff8ff

080003ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <LL_AHB1_GRP1_EnableClock+0x28>)
 80003b6:	6959      	ldr	r1, [r3, #20]
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_AHB1_GRP1_EnableClock+0x28>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	430a      	orrs	r2, r1
 80003be:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <LL_AHB1_GRP1_EnableClock+0x28>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4013      	ands	r3, r2
 80003c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ca:	68fb      	ldr	r3, [r7, #12]
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b004      	add	sp, #16
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000

080003d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_FLASH_SetLatency+0x24>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2201      	movs	r2, #1
 80003e6:	4393      	bics	r3, r2
 80003e8:	0019      	movs	r1, r3
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <LL_FLASH_SetLatency+0x24>)
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	430a      	orrs	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40022000 	.word	0x40022000

08000400 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <LL_FLASH_GetLatency+0x14>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2201      	movs	r2, #1
 800040a:	4013      	ands	r3, r2
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40022000 	.word	0x40022000

08000418 <LL_GPIO_ResetOutputPin>:
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}

08000430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000434:	f000 f970 	bl	8000718 <HAL_Init>

  /* USER CODE BEGIN Init */
  LedHandler_Init();
 8000438:	f7ff ff0a 	bl	8000250 <LedHandler_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043c:	f000 f808 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000440:	f000 f896 	bl	8000570 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000444:	f000 f838 	bl	80004b8 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	LedHandler_MainFunction();
 8000448:	f7ff ff12 	bl	8000270 <LedHandler_MainFunction>
 800044c:	e7fc      	b.n	8000448 <main+0x18>
	...

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ffbf 	bl	80003d8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	f7ff ffd0 	bl	8000400 <LL_FLASH_GetLatency>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d1fb      	bne.n	800045c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000464:	f7ff ff26 	bl	80002b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	f7ff ff31 	bl	80002d0 <LL_RCC_HSI_IsReady>
 800046e:	0003      	movs	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d1fa      	bne.n	800046a <SystemClock_Config+0x1a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000474:	2010      	movs	r0, #16
 8000476:	f7ff ff3b 	bl	80002f0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_8);
 800047a:	20a0      	movs	r0, #160	; 0xa0
 800047c:	f7ff ff6c 	bl	8000358 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff ff7d 	bl	8000380 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ff46 	bl	8000318 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	f7ff ff57 	bl	8000340 <LL_RCC_GetSysClkSource>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d1fb      	bne.n	800048e <SystemClock_Config+0x3e>
  {

  }
  LL_SetSystemCoreClock(1000000);
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <SystemClock_Config+0x64>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 ff49 	bl	8001330 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800049e:	2003      	movs	r0, #3
 80004a0:	f000 f94e 	bl	8000740 <HAL_InitTick>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004a8:	f000 f891 	bl	80005ce <Error_Handler>
  }
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	000f4240 	.word	0x000f4240

080004b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004be:	230c      	movs	r3, #12
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	0018      	movs	r0, r3
 80004c4:	2314      	movs	r3, #20
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f000 ff63 	bl	8001394 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	0018      	movs	r0, r3
 80004d2:	2308      	movs	r3, #8
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f000 ff5c 	bl	8001394 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_TIM1_Init+0xac>)
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MX_TIM1_Init+0xb0>)
 80004e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <MX_TIM1_Init+0xac>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_TIM1_Init+0xac>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_TIM1_Init+0xac>)
 80004f0:	4a1e      	ldr	r2, [pc, #120]	; (800056c <MX_TIM1_Init+0xb4>)
 80004f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_TIM1_Init+0xac>)
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_TIM1_Init+0xac>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_TIM1_Init+0xac>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_TIM1_Init+0xac>)
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fa46 	bl	800099c <HAL_TIM_Base_Init>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000514:	f000 f85b 	bl	80005ce <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000518:	210c      	movs	r1, #12
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000526:	187a      	adds	r2, r7, r1
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_TIM1_Init+0xac>)
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fb9b 	bl	8000c68 <HAL_TIM_SlaveConfigSynchro>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000536:	f000 f84a 	bl	80005ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000546:	1d3a      	adds	r2, r7, #4
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_TIM1_Init+0xac>)
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fd77 	bl	8001040 <HAL_TIMEx_MasterConfigSynchronization>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000556:	f000 f83a 	bl	80005ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b008      	add	sp, #32
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000030 	.word	0x20000030
 8000568:	40012c00 	.word	0x40012c00
 800056c:	0000ffff 	.word	0x0000ffff

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	003b      	movs	r3, r7
 8000578:	0018      	movs	r0, r3
 800057a:	2318      	movs	r3, #24
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f000 ff08 	bl	8001394 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	029b      	lsls	r3, r3, #10
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff ff0f 	bl	80003ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 800058e:	2390      	movs	r3, #144	; 0x90
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2110      	movs	r1, #16
 8000594:	0018      	movs	r0, r3
 8000596:	f7ff ff3f 	bl	8000418 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800059a:	003b      	movs	r3, r7
 800059c:	2210      	movs	r2, #16
 800059e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2201      	movs	r2, #1
 80005a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005b8:	003a      	movs	r2, r7
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fe58 	bl	8001276 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b006      	add	sp, #24
 80005cc:	bd80      	pop	{r7, pc}

080005ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d2:	b672      	cpsid	i
}
 80005d4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <Error_Handler+0x8>

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	619a      	str	r2, [r3, #24]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	2201      	movs	r2, #1
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0549      	lsls	r1, r1, #21
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_MspInit+0x44>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	055b      	lsls	r3, r3, #21
 800060c:	4013      	ands	r3, r2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_TIM_Base_MspInit+0x48>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d115      	bne.n	800065e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <HAL_TIM_Base_MspInit+0x4c>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <HAL_TIM_Base_MspInit+0x4c>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0109      	lsls	r1, r1, #4
 800063c:	430a      	orrs	r2, r1
 800063e:	619a      	str	r2, [r3, #24]
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_TIM_Base_MspInit+0x4c>)
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	011b      	lsls	r3, r3, #4
 8000648:	4013      	ands	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200e      	movs	r0, #14
 8000654:	f000 f970 	bl	8000938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000658:	200e      	movs	r0, #14
 800065a:	f000 f982 	bl	8000962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b004      	add	sp, #16
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40012c00 	.word	0x40012c00
 800066c:	40021000 	.word	0x40021000

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 f888 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <TIM1_CC_IRQHandler+0x14>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f9c8 	bl	8000a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	20000030 	.word	0x20000030

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c8:	f7ff fff6 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f2:	f000 fe2b 	bl	800134c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fe9b 	bl	8000430 <main>

080006fa <LoopForever>:

LoopForever:
    b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000708:	080013c4 	.word	0x080013c4
  ldr r2, =_sbss
 800070c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000710:	2000007c 	.word	0x2000007c

08000714 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_IRQHandler>
	...

08000718 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_Init+0x24>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_Init+0x24>)
 8000722:	2110      	movs	r1, #16
 8000724:	430a      	orrs	r2, r1
 8000726:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f809 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072e:	f7ff ff53 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_InitTick+0x5c>)
 800074a:	681c      	ldr	r4, [r3, #0]
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_InitTick+0x60>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	0019      	movs	r1, r3
 8000752:	23fa      	movs	r3, #250	; 0xfa
 8000754:	0098      	lsls	r0, r3, #2
 8000756:	f7ff fcd7 	bl	8000108 <__udivsi3>
 800075a:	0003      	movs	r3, r0
 800075c:	0019      	movs	r1, r3
 800075e:	0020      	movs	r0, r4
 8000760:	f7ff fcd2 	bl	8000108 <__udivsi3>
 8000764:	0003      	movs	r3, r0
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f90b 	bl	8000982 <HAL_SYSTICK_Config>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	e00f      	b.n	8000794 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d80b      	bhi.n	8000792 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	2301      	movs	r3, #1
 800077e:	425b      	negs	r3, r3
 8000780:	2200      	movs	r2, #0
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f8d8 	bl	8000938 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_InitTick+0x64>)
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	b003      	add	sp, #12
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	001a      	movs	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	18d2      	adds	r2, r2, r3
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000078 	.word	0x20000078

080007cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000078 	.word	0x20000078

080007e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0002      	movs	r2, r0
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b7f      	cmp	r3, #127	; 0x7f
 80007f2:	d809      	bhi.n	8000808 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	001a      	movs	r2, r3
 80007fa:	231f      	movs	r3, #31
 80007fc:	401a      	ands	r2, r3
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_EnableIRQ+0x30>)
 8000800:	2101      	movs	r1, #1
 8000802:	4091      	lsls	r1, r2
 8000804:	000a      	movs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
  }
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b7f      	cmp	r3, #127	; 0x7f
 8000828:	d828      	bhi.n	800087c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <__NVIC_SetPriority+0xd4>)
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b25b      	sxtb	r3, r3
 8000832:	089b      	lsrs	r3, r3, #2
 8000834:	33c0      	adds	r3, #192	; 0xc0
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	589b      	ldr	r3, [r3, r2]
 800083a:	1dfa      	adds	r2, r7, #7
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	0011      	movs	r1, r2
 8000840:	2203      	movs	r2, #3
 8000842:	400a      	ands	r2, r1
 8000844:	00d2      	lsls	r2, r2, #3
 8000846:	21ff      	movs	r1, #255	; 0xff
 8000848:	4091      	lsls	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	43d2      	mvns	r2, r2
 800084e:	401a      	ands	r2, r3
 8000850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	401a      	ands	r2, r3
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0018      	movs	r0, r3
 8000860:	2303      	movs	r3, #3
 8000862:	4003      	ands	r3, r0
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000868:	481f      	ldr	r0, [pc, #124]	; (80008e8 <__NVIC_SetPriority+0xd4>)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	430a      	orrs	r2, r1
 8000874:	33c0      	adds	r3, #192	; 0xc0
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800087a:	e031      	b.n	80008e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <__NVIC_SetPriority+0xd8>)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	0019      	movs	r1, r3
 8000884:	230f      	movs	r3, #15
 8000886:	400b      	ands	r3, r1
 8000888:	3b08      	subs	r3, #8
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	3306      	adds	r3, #6
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	18d3      	adds	r3, r2, r3
 8000892:	3304      	adds	r3, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1dfa      	adds	r2, r7, #7
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	0011      	movs	r1, r2
 800089c:	2203      	movs	r2, #3
 800089e:	400a      	ands	r2, r1
 80008a0:	00d2      	lsls	r2, r2, #3
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	4091      	lsls	r1, r2
 80008a6:	000a      	movs	r2, r1
 80008a8:	43d2      	mvns	r2, r2
 80008aa:	401a      	ands	r2, r3
 80008ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	401a      	ands	r2, r3
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0018      	movs	r0, r3
 80008bc:	2303      	movs	r3, #3
 80008be:	4003      	ands	r3, r0
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <__NVIC_SetPriority+0xd8>)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	001c      	movs	r4, r3
 80008cc:	230f      	movs	r3, #15
 80008ce:	4023      	ands	r3, r4
 80008d0:	3b08      	subs	r3, #8
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	430a      	orrs	r2, r1
 80008d6:	3306      	adds	r3, #6
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	18c3      	adds	r3, r0, r3
 80008dc:	3304      	adds	r3, #4
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b003      	add	sp, #12
 80008e6:	bd90      	pop	{r4, r7, pc}
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	045b      	lsls	r3, r3, #17
 8000900:	429a      	cmp	r2, r3
 8000902:	d301      	bcc.n	8000908 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000904:	2301      	movs	r3, #1
 8000906:	e010      	b.n	800092a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <SysTick_Config+0x44>)
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	3a01      	subs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000910:	2301      	movs	r3, #1
 8000912:	425b      	negs	r3, r3
 8000914:	2103      	movs	r1, #3
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff ff7c 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x44>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x44>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	210f      	movs	r1, #15
 8000944:	187b      	adds	r3, r7, r1
 8000946:	1c02      	adds	r2, r0, #0
 8000948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	187b      	adds	r3, r7, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b25b      	sxtb	r3, r3
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff ff5d 	bl	8000814 <__NVIC_SetPriority>
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	0002      	movs	r2, r0
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b25b      	sxtb	r3, r3
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff33 	bl	80007e0 <__NVIC_EnableIRQ>
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ffaf 	bl	80008f0 <SysTick_Config>
 8000992:	0003      	movs	r3, r0
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e042      	b.n	8000a34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	223d      	movs	r2, #61	; 0x3d
 80009b2:	5c9b      	ldrb	r3, [r3, r2]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d107      	bne.n	80009ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	223c      	movs	r2, #60	; 0x3c
 80009be:	2100      	movs	r1, #0
 80009c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fe2b 	bl	8000620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	223d      	movs	r2, #61	; 0x3d
 80009ce:	2102      	movs	r1, #2
 80009d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3304      	adds	r3, #4
 80009da:	0019      	movs	r1, r3
 80009dc:	0010      	movs	r0, r2
 80009de:	f000 f9b1 	bl	8000d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2246      	movs	r2, #70	; 0x46
 80009e6:	2101      	movs	r1, #1
 80009e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	223e      	movs	r2, #62	; 0x3e
 80009ee:	2101      	movs	r1, #1
 80009f0:	5499      	strb	r1, [r3, r2]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	223f      	movs	r2, #63	; 0x3f
 80009f6:	2101      	movs	r1, #1
 80009f8:	5499      	strb	r1, [r3, r2]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	2101      	movs	r1, #1
 8000a00:	5499      	strb	r1, [r3, r2]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2241      	movs	r2, #65	; 0x41
 8000a06:	2101      	movs	r1, #1
 8000a08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2242      	movs	r2, #66	; 0x42
 8000a0e:	2101      	movs	r1, #1
 8000a10:	5499      	strb	r1, [r3, r2]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2243      	movs	r2, #67	; 0x43
 8000a16:	2101      	movs	r1, #1
 8000a18:	5499      	strb	r1, [r3, r2]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2244      	movs	r2, #68	; 0x44
 8000a1e:	2101      	movs	r1, #1
 8000a20:	5499      	strb	r1, [r3, r2]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2245      	movs	r2, #69	; 0x45
 8000a26:	2101      	movs	r1, #1
 8000a28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	223d      	movs	r2, #61	; 0x3d
 8000a2e:	2101      	movs	r1, #1
 8000a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d124      	bne.n	8000a9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	2202      	movs	r2, #2
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d11d      	bne.n	8000a9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2203      	movs	r2, #3
 8000a66:	4252      	negs	r2, r2
 8000a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	2203      	movs	r2, #3
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d004      	beq.n	8000a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f948 	bl	8000d14 <HAL_TIM_IC_CaptureCallback>
 8000a84:	e007      	b.n	8000a96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 f93b 	bl	8000d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 f947 	bl	8000d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d125      	bne.n	8000af6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d11e      	bne.n	8000af6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2205      	movs	r2, #5
 8000abe:	4252      	negs	r2, r2
 8000ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	699a      	ldr	r2, [r3, #24]
 8000ace:	23c0      	movs	r3, #192	; 0xc0
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d004      	beq.n	8000ae0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 f91b 	bl	8000d14 <HAL_TIM_IC_CaptureCallback>
 8000ade:	e007      	b.n	8000af0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f90e 	bl	8000d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f91a 	bl	8000d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d124      	bne.n	8000b4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d11d      	bne.n	8000b4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2209      	movs	r2, #9
 8000b18:	4252      	negs	r2, r2
 8000b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2204      	movs	r2, #4
 8000b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d004      	beq.n	8000b38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 f8ef 	bl	8000d14 <HAL_TIM_IC_CaptureCallback>
 8000b36:	e007      	b.n	8000b48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f8e2 	bl	8000d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 f8ee 	bl	8000d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	2210      	movs	r2, #16
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b10      	cmp	r3, #16
 8000b5a:	d125      	bne.n	8000ba8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	2210      	movs	r2, #16
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b10      	cmp	r3, #16
 8000b68:	d11e      	bne.n	8000ba8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2211      	movs	r2, #17
 8000b70:	4252      	negs	r2, r2
 8000b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2208      	movs	r2, #8
 8000b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	69da      	ldr	r2, [r3, #28]
 8000b80:	23c0      	movs	r3, #192	; 0xc0
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	d004      	beq.n	8000b92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f8c2 	bl	8000d14 <HAL_TIM_IC_CaptureCallback>
 8000b90:	e007      	b.n	8000ba2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 f8b5 	bl	8000d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 f8c1 	bl	8000d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d10f      	bne.n	8000bd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d108      	bne.n	8000bd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2202      	movs	r2, #2
 8000bca:	4252      	negs	r2, r2
 8000bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 f88f 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b80      	cmp	r3, #128	; 0x80
 8000be2:	d10f      	bne.n	8000c04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b80      	cmp	r3, #128	; 0x80
 8000bf0:	d108      	bne.n	8000c04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2281      	movs	r2, #129	; 0x81
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 fa78 	bl	80010f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b40      	cmp	r3, #64	; 0x40
 8000c10:	d10f      	bne.n	8000c32 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2240      	movs	r2, #64	; 0x40
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b40      	cmp	r3, #64	; 0x40
 8000c1e:	d108      	bne.n	8000c32 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2241      	movs	r2, #65	; 0x41
 8000c26:	4252      	negs	r2, r2
 8000c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 f881 	bl	8000d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	2220      	movs	r2, #32
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b20      	cmp	r3, #32
 8000c3e:	d10f      	bne.n	8000c60 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	2220      	movs	r2, #32
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b20      	cmp	r3, #32
 8000c4c:	d108      	bne.n	8000c60 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2221      	movs	r2, #33	; 0x21
 8000c54:	4252      	negs	r2, r2
 8000c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fa42 	bl	80010e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	223c      	movs	r2, #60	; 0x3c
 8000c76:	5c9b      	ldrb	r3, [r3, r2]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d101      	bne.n	8000c80 <HAL_TIM_SlaveConfigSynchro+0x18>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e032      	b.n	8000ce6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	223c      	movs	r2, #60	; 0x3c
 8000c84:	2101      	movs	r1, #1
 8000c86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	223d      	movs	r2, #61	; 0x3d
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f8c0 	bl	8000e1c <TIM_SlaveTimer_SetConfig>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d009      	beq.n	8000cb4 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	223d      	movs	r2, #61	; 0x3d
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	223c      	movs	r2, #60	; 0x3c
 8000cac:	2100      	movs	r1, #0
 8000cae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e018      	b.n	8000ce6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	438a      	bics	r2, r1
 8000cc2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	223d      	movs	r2, #61	; 0x3d
 8000cd8:	2101      	movs	r1, #1
 8000cda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	223c      	movs	r2, #60	; 0x3c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	ffffbfff 	.word	0xffffbfff

08000cf4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <TIM_Base_SetConfig+0xc0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d003      	beq.n	8000d64 <TIM_Base_SetConfig+0x20>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a2a      	ldr	r2, [pc, #168]	; (8000e08 <TIM_Base_SetConfig+0xc4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d108      	bne.n	8000d76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2270      	movs	r2, #112	; 0x70
 8000d68:	4393      	bics	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <TIM_Base_SetConfig+0xc0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00f      	beq.n	8000d9e <TIM_Base_SetConfig+0x5a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <TIM_Base_SetConfig+0xc4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00b      	beq.n	8000d9e <TIM_Base_SetConfig+0x5a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <TIM_Base_SetConfig+0xc8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <TIM_Base_SetConfig+0x5a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <TIM_Base_SetConfig+0xcc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d003      	beq.n	8000d9e <TIM_Base_SetConfig+0x5a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <TIM_Base_SetConfig+0xd0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d108      	bne.n	8000db0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <TIM_Base_SetConfig+0xd4>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	4393      	bics	r3, r2
 8000db6:	001a      	movs	r2, r3
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <TIM_Base_SetConfig+0xc0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d007      	beq.n	8000dee <TIM_Base_SetConfig+0xaa>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <TIM_Base_SetConfig+0xcc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d003      	beq.n	8000dee <TIM_Base_SetConfig+0xaa>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <TIM_Base_SetConfig+0xd0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d103      	bne.n	8000df6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40012c00 	.word	0x40012c00
 8000e08:	40000400 	.word	0x40000400
 8000e0c:	40002000 	.word	0x40002000
 8000e10:	40014400 	.word	0x40014400
 8000e14:	40014800 	.word	0x40014800
 8000e18:	fffffcff 	.word	0xfffffcff

08000e1c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e26:	2317      	movs	r3, #23
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2270      	movs	r2, #112	; 0x70
 8000e3a:	4393      	bics	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	4393      	bics	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b70      	cmp	r3, #112	; 0x70
 8000e68:	d015      	beq.n	8000e96 <TIM_SlaveTimer_SetConfig+0x7a>
 8000e6a:	d900      	bls.n	8000e6e <TIM_SlaveTimer_SetConfig+0x52>
 8000e6c:	e05b      	b.n	8000f26 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e6e:	2b60      	cmp	r3, #96	; 0x60
 8000e70:	d04f      	beq.n	8000f12 <TIM_SlaveTimer_SetConfig+0xf6>
 8000e72:	d858      	bhi.n	8000f26 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e74:	2b50      	cmp	r3, #80	; 0x50
 8000e76:	d042      	beq.n	8000efe <TIM_SlaveTimer_SetConfig+0xe2>
 8000e78:	d855      	bhi.n	8000f26 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e7a:	2b40      	cmp	r3, #64	; 0x40
 8000e7c:	d016      	beq.n	8000eac <TIM_SlaveTimer_SetConfig+0x90>
 8000e7e:	d852      	bhi.n	8000f26 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e80:	2b30      	cmp	r3, #48	; 0x30
 8000e82:	d055      	beq.n	8000f30 <TIM_SlaveTimer_SetConfig+0x114>
 8000e84:	d84f      	bhi.n	8000f26 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e86:	2b20      	cmp	r3, #32
 8000e88:	d052      	beq.n	8000f30 <TIM_SlaveTimer_SetConfig+0x114>
 8000e8a:	d84c      	bhi.n	8000f26 <TIM_SlaveTimer_SetConfig+0x10a>
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d04f      	beq.n	8000f30 <TIM_SlaveTimer_SetConfig+0x114>
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d04d      	beq.n	8000f30 <TIM_SlaveTimer_SetConfig+0x114>
 8000e94:	e047      	b.n	8000f26 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68d9      	ldr	r1, [r3, #12]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	f000 f8ab 	bl	8001000 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8000eaa:	e042      	b.n	8000f32 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d101      	bne.n	8000eb8 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e03f      	b.n	8000f38 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	438a      	bics	r2, r1
 8000ece:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	22f0      	movs	r2, #240	; 0xf0
 8000edc:	4393      	bics	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	621a      	str	r2, [r3, #32]
      break;
 8000efc:	e019      	b.n	8000f32 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	6899      	ldr	r1, [r3, #8]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	f000 f818 	bl	8000f40 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8000f10:	e00f      	b.n	8000f32 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	6899      	ldr	r1, [r3, #8]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	001a      	movs	r2, r3
 8000f20:	f000 f83c 	bl	8000f9c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8000f24:	e005      	b.n	8000f32 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8000f26:	2317      	movs	r3, #23
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
      break;
 8000f2e:	e000      	b.n	8000f32 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8000f30:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8000f32:	2317      	movs	r3, #23
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	781b      	ldrb	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b006      	add	sp, #24
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4393      	bics	r3, r2
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	22f0      	movs	r2, #240	; 0xf0
 8000f6a:	4393      	bics	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	4393      	bics	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	621a      	str	r2, [r3, #32]
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	2210      	movs	r2, #16
 8000fae:	4393      	bics	r3, r2
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <TIM_TI2_ConfigInputStage+0x60>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	031b      	lsls	r3, r3, #12
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	22a0      	movs	r2, #160	; 0xa0
 8000fd8:	4393      	bics	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	621a      	str	r2, [r3, #32]
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b006      	add	sp, #24
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	ffff0fff 	.word	0xffff0fff

08001000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <TIM_ETR_SetConfig+0x3c>)
 8001018:	4013      	ands	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	021a      	lsls	r2, r3, #8
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	431a      	orrs	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	4313      	orrs	r3, r2
 800102c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	609a      	str	r2, [r3, #8]
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b006      	add	sp, #24
 800103a:	bd80      	pop	{r7, pc}
 800103c:	ffff00ff 	.word	0xffff00ff

08001040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	223c      	movs	r2, #60	; 0x3c
 800104e:	5c9b      	ldrb	r3, [r3, r2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001054:	2302      	movs	r3, #2
 8001056:	e03c      	b.n	80010d2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	223c      	movs	r2, #60	; 0x3c
 800105c:	2101      	movs	r1, #1
 800105e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	223d      	movs	r2, #61	; 0x3d
 8001064:	2102      	movs	r1, #2
 8001066:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2270      	movs	r2, #112	; 0x70
 800107c:	4393      	bics	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d004      	beq.n	80010a6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10c      	bne.n	80010c0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	4393      	bics	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	223d      	movs	r2, #61	; 0x3d
 80010c4:	2101      	movs	r1, #1
 80010c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	223c      	movs	r2, #60	; 0x3c
 80010cc:	2100      	movs	r1, #0
 80010ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	40012c00 	.word	0x40012c00
 80010e0:	40000400 	.word	0x40000400

080010e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <LL_GPIO_SetPinMode>:
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	435b      	muls	r3, r3
 8001118:	001a      	movs	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	189b      	adds	r3, r3, r2
 8001120:	43db      	mvns	r3, r3
 8001122:	400b      	ands	r3, r1
 8001124:	001a      	movs	r2, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	435b      	muls	r3, r3
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	434b      	muls	r3, r1
 800112e:	431a      	orrs	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}

0800113c <LL_GPIO_SetPinOutputType>:
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	43d2      	mvns	r2, r2
 8001150:	401a      	ands	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	434b      	muls	r3, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	605a      	str	r2, [r3, #4]
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b004      	add	sp, #16
 8001164:	bd80      	pop	{r7, pc}

08001166 <LL_GPIO_SetPinSpeed>:
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6899      	ldr	r1, [r3, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	435b      	muls	r3, r3
 800117a:	001a      	movs	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	189b      	adds	r3, r3, r2
 8001182:	43db      	mvns	r3, r3
 8001184:	400b      	ands	r3, r1
 8001186:	001a      	movs	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	435b      	muls	r3, r3
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	434b      	muls	r3, r1
 8001190:	431a      	orrs	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	609a      	str	r2, [r3, #8]
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}

0800119e <LL_GPIO_SetPinPull>:
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68d9      	ldr	r1, [r3, #12]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	435b      	muls	r3, r3
 80011b2:	001a      	movs	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	189b      	adds	r3, r3, r2
 80011ba:	43db      	mvns	r3, r3
 80011bc:	400b      	ands	r3, r1
 80011be:	001a      	movs	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	435b      	muls	r3, r3
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	434b      	muls	r3, r1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	60da      	str	r2, [r3, #12]
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <LL_GPIO_SetAFPin_0_7>:
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6a19      	ldr	r1, [r3, #32]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	435b      	muls	r3, r3
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4353      	muls	r3, r2
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	435a      	muls	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	43db      	mvns	r3, r3
 80011fa:	400b      	ands	r3, r1
 80011fc:	001a      	movs	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	435b      	muls	r3, r3
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	434b      	muls	r3, r1
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	434b      	muls	r3, r1
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	434b      	muls	r3, r1
 800120e:	431a      	orrs	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	621a      	str	r2, [r3, #32]
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b004      	add	sp, #16
 800121a:	bd80      	pop	{r7, pc}

0800121c <LL_GPIO_SetAFPin_8_15>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	0a12      	lsrs	r2, r2, #8
 8001234:	4353      	muls	r3, r2
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	0a12      	lsrs	r2, r2, #8
 800123a:	4353      	muls	r3, r2
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	0a12      	lsrs	r2, r2, #8
 8001240:	435a      	muls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	43db      	mvns	r3, r3
 800124a:	400b      	ands	r3, r1
 800124c:	001a      	movs	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	0a09      	lsrs	r1, r1, #8
 8001256:	434b      	muls	r3, r1
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	0a09      	lsrs	r1, r1, #8
 800125c:	434b      	muls	r3, r1
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	0a09      	lsrs	r1, r1, #8
 8001262:	434b      	muls	r3, r1
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	434b      	muls	r3, r1
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}

08001276 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001284:	e048      	b.n	8001318 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2101      	movs	r1, #1
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4091      	lsls	r1, r2
 8001290:	000a      	movs	r2, r1
 8001292:	4013      	ands	r3, r2
 8001294:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d03a      	beq.n	8001312 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d003      	beq.n	80012ac <LL_GPIO_Init+0x36>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d10e      	bne.n	80012ca <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff ff56 	bl	8001166 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	6819      	ldr	r1, [r3, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ff39 	bl	800113c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ff63 	bl	800119e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d111      	bne.n	8001304 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d807      	bhi.n	80012f6 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0018      	movs	r0, r3
 80012f0:	f7ff ff71 	bl	80011d6 <LL_GPIO_SetAFPin_0_7>
 80012f4:	e006      	b.n	8001304 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff ff8c 	bl	800121c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff fef9 	bl	8001104 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	40da      	lsrs	r2, r3
 8001320:	1e13      	subs	r3, r2, #0
 8001322:	d1b0      	bne.n	8001286 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b004      	add	sp, #16
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <LL_SetSystemCoreClock+0x18>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	20000000 	.word	0x20000000

0800134c <__libc_init_array>:
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	2600      	movs	r6, #0
 8001350:	4d0c      	ldr	r5, [pc, #48]	; (8001384 <__libc_init_array+0x38>)
 8001352:	4c0d      	ldr	r4, [pc, #52]	; (8001388 <__libc_init_array+0x3c>)
 8001354:	1b64      	subs	r4, r4, r5
 8001356:	10a4      	asrs	r4, r4, #2
 8001358:	42a6      	cmp	r6, r4
 800135a:	d109      	bne.n	8001370 <__libc_init_array+0x24>
 800135c:	2600      	movs	r6, #0
 800135e:	f000 f821 	bl	80013a4 <_init>
 8001362:	4d0a      	ldr	r5, [pc, #40]	; (800138c <__libc_init_array+0x40>)
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <__libc_init_array+0x44>)
 8001366:	1b64      	subs	r4, r4, r5
 8001368:	10a4      	asrs	r4, r4, #2
 800136a:	42a6      	cmp	r6, r4
 800136c:	d105      	bne.n	800137a <__libc_init_array+0x2e>
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	00b3      	lsls	r3, r6, #2
 8001372:	58eb      	ldr	r3, [r5, r3]
 8001374:	4798      	blx	r3
 8001376:	3601      	adds	r6, #1
 8001378:	e7ee      	b.n	8001358 <__libc_init_array+0xc>
 800137a:	00b3      	lsls	r3, r6, #2
 800137c:	58eb      	ldr	r3, [r5, r3]
 800137e:	4798      	blx	r3
 8001380:	3601      	adds	r6, #1
 8001382:	e7f2      	b.n	800136a <__libc_init_array+0x1e>
 8001384:	080013bc 	.word	0x080013bc
 8001388:	080013bc 	.word	0x080013bc
 800138c:	080013bc 	.word	0x080013bc
 8001390:	080013c0 	.word	0x080013c0

08001394 <memset>:
 8001394:	0003      	movs	r3, r0
 8001396:	1882      	adds	r2, r0, r2
 8001398:	4293      	cmp	r3, r2
 800139a:	d100      	bne.n	800139e <memset+0xa>
 800139c:	4770      	bx	lr
 800139e:	7019      	strb	r1, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	e7f9      	b.n	8001398 <memset+0x4>

080013a4 <_init>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013aa:	bc08      	pop	{r3}
 80013ac:	469e      	mov	lr, r3
 80013ae:	4770      	bx	lr

080013b0 <_fini>:
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b6:	bc08      	pop	{r3}
 80013b8:	469e      	mov	lr, r3
 80013ba:	4770      	bx	lr
