
ProjektX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000960  08000960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000970  08000970  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000970  08000970  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000970  08000970  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000970  08000970  00010970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000974  08000974  00010974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  0800097c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800097c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015f1  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008cb  00000000  00000000  0002161d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00021ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  000220e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000094cd  00000000  00000000  00022270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002385  00000000  00000000  0002b73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00031142  00000000  00000000  0002dac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005ec04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000057c  00000000  00000000  0005ec54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000948 	.word	0x08000948

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000948 	.word	0x08000948

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	4013      	ands	r3, r2
 8000236:	041a      	lsls	r2, r3, #16
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	43db      	mvns	r3, r3
 800023c:	6839      	ldr	r1, [r7, #0]
 800023e:	400b      	ands	r3, r1
 8000240:	431a      	orrs	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	619a      	str	r2, [r3, #24]
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	b004      	add	sp, #16
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <LedHandler_MainFunction>:

}

/* called every 10 ms */
void LedHandler_MainFunction()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	static uint32_t timer = 0;

	if (timer == LED_DELAY_TIME_MS)
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <LedHandler_MainFunction+0x30>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b64      	cmp	r3, #100	; 0x64
 800025a:	d108      	bne.n	800026e <LedHandler_MainFunction+0x1e>
	{
		LL_GPIO_TogglePin(GPIOA, LED_Pin);
 800025c:	2390      	movs	r3, #144	; 0x90
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2110      	movs	r1, #16
 8000262:	0018      	movs	r0, r3
 8000264:	f7ff ffdc 	bl	8000220 <LL_GPIO_TogglePin>
		timer = 0;
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <LedHandler_MainFunction+0x30>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
	}

	timer++;
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <LedHandler_MainFunction+0x30>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	4b02      	ldr	r3, [pc, #8]	; (8000280 <LedHandler_MainFunction+0x30>)
 8000276:	601a      	str	r2, [r3, #0]
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000020 	.word	0x20000020

08000284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	0002      	movs	r2, r0
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b7f      	cmp	r3, #127	; 0x7f
 8000296:	d809      	bhi.n	80002ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	001a      	movs	r2, r3
 800029e:	231f      	movs	r3, #31
 80002a0:	401a      	ands	r2, r3
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_EnableIRQ+0x30>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	4091      	lsls	r1, r2
 80002a8:	000a      	movs	r2, r1
 80002aa:	601a      	str	r2, [r3, #0]
  }
}
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b002      	add	sp, #8
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000e100 	.word	0xe000e100

080002b8 <SysTick_Handler>:

static void Os_SetEvent();

/* handling sys tick via interupt */
void SysTick_Handler()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	globalTime++;
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <SysTick_Handler+0x18>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	1c5a      	adds	r2, r3, #1
 80002c2:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <SysTick_Handler+0x18>)
 80002c4:	601a      	str	r2, [r3, #0]
	/* interupt from sis timer every 1 ms, call scheduler */
	Os_Scheduler();
 80002c6:	f000 f815 	bl	80002f4 <Os_Scheduler>
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000028 	.word	0x20000028

080002d4 <Os_ClearEvent>:

/* after task is procced of the current event, clear it */
static void Os_ClearEvent(uint32_t mask)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	evMask ^= mask;
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <Os_ClearEvent+0x1c>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	405a      	eors	r2, r3
 80002e4:	4b02      	ldr	r3, [pc, #8]	; (80002f0 <Os_ClearEvent+0x1c>)
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b002      	add	sp, #8
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000024 	.word	0x20000024

080002f4 <Os_Scheduler>:
	return globalTime;
}

/* Handling Tasks */
void Os_Scheduler()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	if ((globalTime % Time_10MS) == 0)
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <Os_Scheduler+0x3c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	210a      	movs	r1, #10
 80002fe:	0018      	movs	r0, r3
 8000300:	f7ff ff88 	bl	8000214 <__aeabi_uidivmod>
 8000304:	1e0b      	subs	r3, r1, #0
 8000306:	d105      	bne.n	8000314 <Os_Scheduler+0x20>
	{
		evMask |= EVENT_10MS;
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <Os_Scheduler+0x40>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2201      	movs	r2, #1
 800030e:	431a      	orrs	r2, r3
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <Os_Scheduler+0x40>)
 8000312:	601a      	str	r2, [r3, #0]
	}
	/* 10 ms task */
	if ((evMask & EVENT_10MS) == 1)
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <Os_Scheduler+0x40>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2201      	movs	r2, #1
 800031a:	4013      	ands	r3, r2
 800031c:	d004      	beq.n	8000328 <Os_Scheduler+0x34>
	{
		Os_10msTask();
 800031e:	f000 f815 	bl	800034c <Os_10msTask>

		Os_ClearEvent(EVENT_10MS);
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ffd6 	bl	80002d4 <Os_ClearEvent>
	}
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	20000028 	.word	0x20000028
 8000334:	20000024 	.word	0x20000024

08000338 <Os_Init>:

/* Os init, inicializate NVIC interupt for SysTick */
void Os_Init()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	__NVIC_EnableIRQ(SysTick_IRQn);
 800033c:	2301      	movs	r3, #1
 800033e:	425b      	negs	r3, r3
 8000340:	0018      	movs	r0, r3
 8000342:	f7ff ff9f 	bl	8000284 <__NVIC_EnableIRQ>
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <Os_10msTask>:

/* 10ms task */
static void Os_10msTask()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	LedHandler_MainFunction();
 8000350:	f7ff ff7e 	bl	8000250 <LedHandler_MainFunction>
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	0002      	movs	r2, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b7f      	cmp	r3, #127	; 0x7f
 8000370:	d828      	bhi.n	80003c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	4a2f      	ldr	r2, [pc, #188]	; (8000430 <__NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b25b      	sxtb	r3, r3
 800037a:	089b      	lsrs	r3, r3, #2
 800037c:	33c0      	adds	r3, #192	; 0xc0
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	589b      	ldr	r3, [r3, r2]
 8000382:	1dfa      	adds	r2, r7, #7
 8000384:	7812      	ldrb	r2, [r2, #0]
 8000386:	0011      	movs	r1, r2
 8000388:	2203      	movs	r2, #3
 800038a:	400a      	ands	r2, r1
 800038c:	00d2      	lsls	r2, r2, #3
 800038e:	21ff      	movs	r1, #255	; 0xff
 8000390:	4091      	lsls	r1, r2
 8000392:	000a      	movs	r2, r1
 8000394:	43d2      	mvns	r2, r2
 8000396:	401a      	ands	r2, r3
 8000398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	019b      	lsls	r3, r3, #6
 800039e:	22ff      	movs	r2, #255	; 0xff
 80003a0:	401a      	ands	r2, r3
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	0018      	movs	r0, r3
 80003a8:	2303      	movs	r3, #3
 80003aa:	4003      	ands	r3, r0
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b0:	481f      	ldr	r0, [pc, #124]	; (8000430 <__NVIC_SetPriority+0xd4>)
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	430a      	orrs	r2, r1
 80003bc:	33c0      	adds	r3, #192	; 0xc0
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003c2:	e031      	b.n	8000428 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <__NVIC_SetPriority+0xd8>)
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	0019      	movs	r1, r3
 80003cc:	230f      	movs	r3, #15
 80003ce:	400b      	ands	r3, r1
 80003d0:	3b08      	subs	r3, #8
 80003d2:	089b      	lsrs	r3, r3, #2
 80003d4:	3306      	adds	r3, #6
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	18d3      	adds	r3, r2, r3
 80003da:	3304      	adds	r3, #4
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	1dfa      	adds	r2, r7, #7
 80003e0:	7812      	ldrb	r2, [r2, #0]
 80003e2:	0011      	movs	r1, r2
 80003e4:	2203      	movs	r2, #3
 80003e6:	400a      	ands	r2, r1
 80003e8:	00d2      	lsls	r2, r2, #3
 80003ea:	21ff      	movs	r1, #255	; 0xff
 80003ec:	4091      	lsls	r1, r2
 80003ee:	000a      	movs	r2, r1
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	401a      	ands	r2, r3
 80003f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	019b      	lsls	r3, r3, #6
 80003fa:	22ff      	movs	r2, #255	; 0xff
 80003fc:	401a      	ands	r2, r3
 80003fe:	1dfb      	adds	r3, r7, #7
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	0018      	movs	r0, r3
 8000404:	2303      	movs	r3, #3
 8000406:	4003      	ands	r3, r0
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <__NVIC_SetPriority+0xd8>)
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	001c      	movs	r4, r3
 8000414:	230f      	movs	r3, #15
 8000416:	4023      	ands	r3, r4
 8000418:	3b08      	subs	r3, #8
 800041a:	089b      	lsrs	r3, r3, #2
 800041c:	430a      	orrs	r2, r1
 800041e:	3306      	adds	r3, #6
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	18c3      	adds	r3, r0, r3
 8000424:	3304      	adds	r3, #4
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b003      	add	sp, #12
 800042e:	bd90      	pop	{r4, r7, pc}
 8000430:	e000e100 	.word	0xe000e100
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	1e5a      	subs	r2, r3, #1
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	045b      	lsls	r3, r3, #17
 8000448:	429a      	cmp	r2, r3
 800044a:	d301      	bcc.n	8000450 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800044c:	2301      	movs	r3, #1
 800044e:	e010      	b.n	8000472 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <SysTick_Config+0x44>)
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	3a01      	subs	r2, #1
 8000456:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000458:	2301      	movs	r3, #1
 800045a:	425b      	negs	r3, r3
 800045c:	2103      	movs	r1, #3
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ff7c 	bl	800035c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <SysTick_Config+0x44>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <SysTick_Config+0x44>)
 800046c:	2207      	movs	r2, #7
 800046e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000470:	2300      	movs	r3, #0
}
 8000472:	0018      	movs	r0, r3
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	e000e010 	.word	0xe000e010

08000480 <LL_GPIO_ResetOutputPin>:
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	683a      	ldr	r2, [r7, #0]
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}

08000498 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004a2:	6959      	ldr	r1, [r3, #20]
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4013      	ands	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* USER CODE BEGIN Init */
	SystemCoreClockUpdate();
 80004c8:	f000 f85e 	bl	8000588 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/1000);
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <main+0x2c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	22fa      	movs	r2, #250	; 0xfa
 80004d2:	0091      	lsls	r1, r2, #2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff fe17 	bl	8000108 <__udivsi3>
 80004da:	0003      	movs	r3, r0
 80004dc:	0018      	movs	r0, r3
 80004de:	f7ff ffab 	bl	8000438 <SysTick_Config>
	Os_Init();
 80004e2:	f7ff ff29 	bl	8000338 <Os_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f805 	bl	80004f4 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  __WFI();
 80004ea:	bf30      	wfi
 80004ec:	e7fd      	b.n	80004ea <main+0x26>
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	20000000 	.word	0x20000000

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	003b      	movs	r3, r7
 80004fc:	0018      	movs	r0, r3
 80004fe:	2318      	movs	r3, #24
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f000 fa18 	bl	8000938 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	029b      	lsls	r3, r3, #10
 800050c:	0018      	movs	r0, r3
 800050e:	f7ff ffc3 	bl	8000498 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2110      	movs	r1, #16
 8000518:	0018      	movs	r0, r3
 800051a:	f7ff ffb1 	bl	8000480 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800051e:	003b      	movs	r3, r7
 8000520:	2210      	movs	r2, #16
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000524:	003b      	movs	r3, r7
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800052a:	003b      	movs	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000530:	003b      	movs	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000536:	003b      	movs	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800053c:	003a      	movs	r2, r7
 800053e:	2390      	movs	r3, #144	; 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 f977 	bl	8000838 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b006      	add	sp, #24
 8000550:	bd80      	pop	{r7, pc}

08000552 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <NMI_Handler+0x4>

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <HardFault_Handler+0x4>

0800055e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_CC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800059e:	4b31      	ldr	r3, [pc, #196]	; (8000664 <SystemCoreClockUpdate+0xdc>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	220c      	movs	r2, #12
 80005a4:	4013      	ands	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b08      	cmp	r3, #8
 80005ac:	d011      	beq.n	80005d2 <SystemCoreClockUpdate+0x4a>
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2b08      	cmp	r3, #8
 80005b2:	d841      	bhi.n	8000638 <SystemCoreClockUpdate+0xb0>
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <SystemCoreClockUpdate+0x3a>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d004      	beq.n	80005ca <SystemCoreClockUpdate+0x42>
 80005c0:	e03a      	b.n	8000638 <SystemCoreClockUpdate+0xb0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <SystemCoreClockUpdate+0xe0>)
 80005c4:	4a29      	ldr	r2, [pc, #164]	; (800066c <SystemCoreClockUpdate+0xe4>)
 80005c6:	601a      	str	r2, [r3, #0]
      break;
 80005c8:	e03a      	b.n	8000640 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <SystemCoreClockUpdate+0xe0>)
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemCoreClockUpdate+0xe4>)
 80005ce:	601a      	str	r2, [r3, #0]
      break;
 80005d0:	e036      	b.n	8000640 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80005d2:	4b24      	ldr	r3, [pc, #144]	; (8000664 <SystemCoreClockUpdate+0xdc>)
 80005d4:	685a      	ldr	r2, [r3, #4]
 80005d6:	23f0      	movs	r3, #240	; 0xf0
 80005d8:	039b      	lsls	r3, r3, #14
 80005da:	4013      	ands	r3, r2
 80005dc:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <SystemCoreClockUpdate+0xdc>)
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	025b      	lsls	r3, r3, #9
 80005e6:	4013      	ands	r3, r2
 80005e8:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	0c9b      	lsrs	r3, r3, #18
 80005ee:	3302      	adds	r3, #2
 80005f0:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <SystemCoreClockUpdate+0xdc>)
 80005f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f6:	220f      	movs	r2, #15
 80005f8:	4013      	ands	r3, r2
 80005fa:	3301      	adds	r3, #1
 80005fc:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	025b      	lsls	r3, r3, #9
 8000604:	429a      	cmp	r2, r3
 8000606:	d10a      	bne.n	800061e <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000608:	6839      	ldr	r1, [r7, #0]
 800060a:	4818      	ldr	r0, [pc, #96]	; (800066c <SystemCoreClockUpdate+0xe4>)
 800060c:	f7ff fd7c 	bl	8000108 <__udivsi3>
 8000610:	0003      	movs	r3, r0
 8000612:	001a      	movs	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	435a      	muls	r2, r3
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <SystemCoreClockUpdate+0xe0>)
 800061a:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 800061c:	e010      	b.n	8000640 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	000a      	movs	r2, r1
 8000622:	0152      	lsls	r2, r2, #5
 8000624:	1a52      	subs	r2, r2, r1
 8000626:	0193      	lsls	r3, r2, #6
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	185b      	adds	r3, r3, r1
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	001a      	movs	r2, r3
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <SystemCoreClockUpdate+0xe0>)
 8000634:	601a      	str	r2, [r3, #0]
      break;
 8000636:	e003      	b.n	8000640 <SystemCoreClockUpdate+0xb8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <SystemCoreClockUpdate+0xe0>)
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <SystemCoreClockUpdate+0xe4>)
 800063c:	601a      	str	r2, [r3, #0]
      break;
 800063e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <SystemCoreClockUpdate+0xdc>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	091b      	lsrs	r3, r3, #4
 8000646:	220f      	movs	r2, #15
 8000648:	4013      	ands	r3, r2
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <SystemCoreClockUpdate+0xe8>)
 800064c:	5cd3      	ldrb	r3, [r2, r3]
 800064e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <SystemCoreClockUpdate+0xe0>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	40da      	lsrs	r2, r3
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <SystemCoreClockUpdate+0xe0>)
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b004      	add	sp, #16
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	20000000 	.word	0x20000000
 800066c:	007a1200 	.word	0x007a1200
 8000670:	08000960 	.word	0x08000960

08000674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000676:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000678:	f7ff ff80 	bl	800057c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a2:	f000 f925 	bl	80008f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff ff0d 	bl	80004c4 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006b8:	08000978 	.word	0x08000978
  ldr r2, =_sbss
 80006bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006c0:	2000002c 	.word	0x2000002c

080006c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_IRQHandler>

080006c6 <LL_GPIO_SetPinMode>:
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6819      	ldr	r1, [r3, #0]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	435b      	muls	r3, r3
 80006da:	001a      	movs	r2, r3
 80006dc:	0013      	movs	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	189b      	adds	r3, r3, r2
 80006e2:	43db      	mvns	r3, r3
 80006e4:	400b      	ands	r3, r1
 80006e6:	001a      	movs	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	435b      	muls	r3, r3
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	434b      	muls	r3, r1
 80006f0:	431a      	orrs	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	601a      	str	r2, [r3, #0]
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}

080006fe <LL_GPIO_SetPinOutputType>:
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	43d2      	mvns	r2, r2
 8000712:	401a      	ands	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	434b      	muls	r3, r1
 800071a:	431a      	orrs	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	605a      	str	r2, [r3, #4]
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b004      	add	sp, #16
 8000726:	bd80      	pop	{r7, pc}

08000728 <LL_GPIO_SetPinSpeed>:
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6899      	ldr	r1, [r3, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	435b      	muls	r3, r3
 800073c:	001a      	movs	r2, r3
 800073e:	0013      	movs	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	189b      	adds	r3, r3, r2
 8000744:	43db      	mvns	r3, r3
 8000746:	400b      	ands	r3, r1
 8000748:	001a      	movs	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	435b      	muls	r3, r3
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	434b      	muls	r3, r1
 8000752:	431a      	orrs	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	609a      	str	r2, [r3, #8]
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b004      	add	sp, #16
 800075e:	bd80      	pop	{r7, pc}

08000760 <LL_GPIO_SetPinPull>:
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	68d9      	ldr	r1, [r3, #12]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	435b      	muls	r3, r3
 8000774:	001a      	movs	r2, r3
 8000776:	0013      	movs	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	189b      	adds	r3, r3, r2
 800077c:	43db      	mvns	r3, r3
 800077e:	400b      	ands	r3, r1
 8000780:	001a      	movs	r2, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	435b      	muls	r3, r3
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	434b      	muls	r3, r1
 800078a:	431a      	orrs	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	60da      	str	r2, [r3, #12]
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b004      	add	sp, #16
 8000796:	bd80      	pop	{r7, pc}

08000798 <LL_GPIO_SetAFPin_0_7>:
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	6a19      	ldr	r1, [r3, #32]
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	435b      	muls	r3, r3
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4353      	muls	r3, r2
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	435a      	muls	r2, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	011b      	lsls	r3, r3, #4
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	43db      	mvns	r3, r3
 80007bc:	400b      	ands	r3, r1
 80007be:	001a      	movs	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	435b      	muls	r3, r3
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	434b      	muls	r3, r1
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	434b      	muls	r3, r1
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	434b      	muls	r3, r1
 80007d0:	431a      	orrs	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	621a      	str	r2, [r3, #32]
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b004      	add	sp, #16
 80007dc:	bd80      	pop	{r7, pc}

080007de <LL_GPIO_SetAFPin_8_15>:
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	0a12      	lsrs	r2, r2, #8
 80007f6:	4353      	muls	r3, r2
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	0a12      	lsrs	r2, r2, #8
 80007fc:	4353      	muls	r3, r2
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	0a12      	lsrs	r2, r2, #8
 8000802:	435a      	muls	r2, r3
 8000804:	0013      	movs	r3, r2
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	1a9b      	subs	r3, r3, r2
 800080a:	43db      	mvns	r3, r3
 800080c:	400b      	ands	r3, r1
 800080e:	001a      	movs	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	0a09      	lsrs	r1, r1, #8
 8000818:	434b      	muls	r3, r1
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	0a09      	lsrs	r1, r1, #8
 800081e:	434b      	muls	r3, r1
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	0a09      	lsrs	r1, r1, #8
 8000824:	434b      	muls	r3, r1
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	434b      	muls	r3, r1
 800082a:	431a      	orrs	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b004      	add	sp, #16
 8000836:	bd80      	pop	{r7, pc}

08000838 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000846:	e048      	b.n	80008da <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d03a      	beq.n	80008d4 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d003      	beq.n	800086e <LL_GPIO_Init+0x36>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d10e      	bne.n	800088c <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	689a      	ldr	r2, [r3, #8]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff ff56 	bl	8000728 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	6819      	ldr	r1, [r3, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff39 	bl	80006fe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	691a      	ldr	r2, [r3, #16]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ff63 	bl	8000760 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d111      	bne.n	80008c6 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d807      	bhi.n	80008b8 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ff71 	bl	8000798 <LL_GPIO_SetAFPin_0_7>
 80008b6:	e006      	b.n	80008c6 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff8c 	bl	80007de <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	68b9      	ldr	r1, [r7, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff fef9 	bl	80006c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	40da      	lsrs	r2, r3
 80008e2:	1e13      	subs	r3, r2, #0
 80008e4:	d1b0      	bne.n	8000848 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b004      	add	sp, #16
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <__libc_init_array>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	2600      	movs	r6, #0
 80008f4:	4d0c      	ldr	r5, [pc, #48]	; (8000928 <__libc_init_array+0x38>)
 80008f6:	4c0d      	ldr	r4, [pc, #52]	; (800092c <__libc_init_array+0x3c>)
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	10a4      	asrs	r4, r4, #2
 80008fc:	42a6      	cmp	r6, r4
 80008fe:	d109      	bne.n	8000914 <__libc_init_array+0x24>
 8000900:	2600      	movs	r6, #0
 8000902:	f000 f821 	bl	8000948 <_init>
 8000906:	4d0a      	ldr	r5, [pc, #40]	; (8000930 <__libc_init_array+0x40>)
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <__libc_init_array+0x44>)
 800090a:	1b64      	subs	r4, r4, r5
 800090c:	10a4      	asrs	r4, r4, #2
 800090e:	42a6      	cmp	r6, r4
 8000910:	d105      	bne.n	800091e <__libc_init_array+0x2e>
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	00b3      	lsls	r3, r6, #2
 8000916:	58eb      	ldr	r3, [r5, r3]
 8000918:	4798      	blx	r3
 800091a:	3601      	adds	r6, #1
 800091c:	e7ee      	b.n	80008fc <__libc_init_array+0xc>
 800091e:	00b3      	lsls	r3, r6, #2
 8000920:	58eb      	ldr	r3, [r5, r3]
 8000922:	4798      	blx	r3
 8000924:	3601      	adds	r6, #1
 8000926:	e7f2      	b.n	800090e <__libc_init_array+0x1e>
 8000928:	08000970 	.word	0x08000970
 800092c:	08000970 	.word	0x08000970
 8000930:	08000970 	.word	0x08000970
 8000934:	08000974 	.word	0x08000974

08000938 <memset>:
 8000938:	0003      	movs	r3, r0
 800093a:	1882      	adds	r2, r0, r2
 800093c:	4293      	cmp	r3, r2
 800093e:	d100      	bne.n	8000942 <memset+0xa>
 8000940:	4770      	bx	lr
 8000942:	7019      	strb	r1, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	e7f9      	b.n	800093c <memset+0x4>

08000948 <_init>:
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094e:	bc08      	pop	{r3}
 8000950:	469e      	mov	lr, r3
 8000952:	4770      	bx	lr

08000954 <_fini>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095a:	bc08      	pop	{r3}
 800095c:	469e      	mov	lr, r3
 800095e:	4770      	bx	lr
